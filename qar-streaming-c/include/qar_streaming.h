/*
 * Auto-generated single header for the qar-streaming C V0 API.
 * Source template: qar_streaming_c/v0/api.h
 * Do not edit this file manually.
 */

/**
 * @file api.h
 * @brief Public C API entry points for the qar-streaming runtime and services.
 *
 * This header exposes the main functions to initialize the library, create and
 * manage runtimes/sessions, and produce rendering frames for streaming. Only
 * symbols declared in this header (and the companion basic_types.h) are
 * considered stable for C consumers.
 */
#ifndef QAR_FUNCTIONS_H
#define QAR_FUNCTIONS_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

/**
 * @file Common.h
 * @brief Common export/import and extern "C" macros for the C API.
 */
#ifndef QAR_STREAMING_C_COMMON_H
#define QAR_STREAMING_C_COMMON_H

#ifdef __cplusplus
#define QAR_STREAMING_EXTERN_C extern "C" // Needed in C++
#else
#define QAR_STREAMING_EXTERN_C // Not needed in C
#endif

#ifdef QAR_STREAMING_EXPORTS // Defined when building the qar-streaming-c DLL
#define QAR_C_API QAR_STREAMING_EXTERN_C __declspec(dllexport)
#else // Defined when using the qar-streaming-c DLL OR static lib
// If primarily used via DLL, dllimport is okay.
// If static linking is a common use case, __declspec(dllimport) is problematic.
// Consider separating macros for static linking vs DLL usage,
// or just remove __declspec(dllimport) if static linking is preferred.
// For now, keep original logic but with corrected EXTERN_C:
#define QAR_C_API QAR_STREAMING_EXTERN_C __declspec(dllimport)
#endif

#if defined(_WIN32) || defined(_WIN64)
#ifndef QAR_ENABLE_D3D11
#define QAR_ENABLE_D3D11
#endif
#define QAR_PLATFORM_WINDOWS
#endif

#ifdef __linux__
#define QAR_PLATFORM_LINUX
#ifdef QAR_ENABLE_OPENGL
#include <GL/gl.h>
#define QAR_HAS_OPENGL_SUPPORT
#endif
#endif

#endif

/**
 * @file basic_types.h
 * @brief Public C API data types for qar-streaming-c.
 *
 * This header defines opaque handles, identifiers, status/result structures,
 * math types, graphics & video frame descriptions, and initialization
 * structures used by the public API functions.
 */
#ifndef QAR_TYPES_H
#define QAR_TYPES_H

#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#ifndef __cplusplus
#include <stdbool.h>
#endif

#ifdef QAR_ENABLE_D3D11
#include <d3d11.h>
#include <d3d11_1.h>
#endif

#ifdef __cplusplus
extern "C"
{
#endif

// ============================================================================
// CONSTANTS
// ============================================================================

#define QAR_MAX_ID_LENGTH 16
#define QAR_ID_DEFAULT { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
#define QAR_MAX_STRING_LENGTH 512
#define QAR_MAX_FRAME_VIEWS 8
#define QAR_MAX_FRAME_TEXTURES 4

// ============================================================================
// Identifiers
// ============================================================================

/** @name Opaque handles
 *  @{ */
/// Cancellation token (opaque)
typedef struct QarCancelTokenHandle QarCancelToken;
/// Runtime instance (opaque)
typedef struct QarRuntimeHandle QarRuntime;
/// Session instance (opaque)
typedef struct QarSessionHandle QarSession;

/// App volume (opaque)
typedef struct QarAppVolumeHandle QarAppVolume;

/// GUI panel (opaque)
typedef struct QarGuiPanelHandle QarGuiPanel;

/// Peer spec (opaque)
typedef struct QarPeerSpecHandle QarPeerSpec;

/// Render stream sender (opaque)
typedef struct QarRenderStreamSenderHandle QarRenderSender;

/// Frame info for current render (opaque)
typedef struct QarRenderFrameInfoHandle QarRenderFrameInfo;
/** @} */

/**
 * @brief Peer identifier.
 *
 * Fixed-size opaque identifier used to reference remote peers.
 */
typedef struct QarPeerId
{
	uint8_t data[QAR_MAX_ID_LENGTH];
} QarPeerId;

/** @brief Session identifier (fixed-size). */
typedef struct QarSessionId
{
	uint8_t data[QAR_MAX_ID_LENGTH];
} QarSessionId;

/** @brief GUI panel identifier (fixed-size). */
typedef struct QarGuiPanelId
{
	uint8_t data[QAR_MAX_ID_LENGTH]; // GUI panel identifier string
} QarGuiPanelId;

/** @brief App volume identifier (fixed-size). */
typedef struct QarAppVolumeId
{
	uint8_t data[QAR_MAX_ID_LENGTH]; // GUI panel identifier string
} QarAppVolumeId;

/** @brief Stream identifier (fixed-size). */
typedef struct QarStreamId
{
	uint8_t data[QAR_MAX_ID_LENGTH]; // GUI panel identifier string
} QarStreamId;

// ============================================================================
// STATUS CODES
// ============================================================================

/**
 * @brief Status codes for API operations (matches qar::StatusCodes in C++ API).
 */
typedef enum QarStatusCode
{
	// Generic
	QAR_STATUS_SUCCESS = 0,
	QAR_STATUS_UNCLASSIFIED = 1,
	QAR_STATUS_STD_ERROR_CODE = 2,
	QAR_STATUS_STD_EXCEPTION = 3,
	QAR_STATUS_NOT_IMPLEMENTED = 4,
	QAR_STATUS_ARGUMENT_NOT_SUPPORTED = 5,
	QAR_STATUS_TIMEOUT = 6,
	QAR_STATUS_LOGIC_ERROR = 7,

	// Message
	QAR_STATUS_MSG_NOT_CONNECTED = 100,
	QAR_STATUS_MSG_INTERNAL_ERROR = 101,
	QAR_STATUS_MSG_KEY_EXPR_INVALID_FORMAT = 102,
	QAR_STATUS_MSG_UNABLE_TO_SEND = 103,
	QAR_STATUS_MSG_QUERY_NOT_EXISTENT = 104,
	QAR_STATUS_MSG_QUERY_UNABLE_TO_REPLY = 105,

	// Session
	QAR_STATUS_SESS_CANCELLATION_REQUESTED = 200,
	QAR_STATUS_SESS_CONFIGURATION_ERROR = 201,

	// GUI Panel
	QAR_STATUS_GUI_PANEL_CANNOT_CREATE = 300,
	QAR_STATUS_GUI_PANEL_DOES_NOT_EXIST_LOCALLY = 301,
	QAR_STATUS_GUI_PANEL_CANNOT_CHANGE_STATE = 302,
	QAR_STATUS_GUI_PANEL_BUILDER_VALIDATION_FAILED = 303,
	QAR_STATUS_GUI_PANEL_CHANGE_NOT_PERMITTED = 304,
	QAR_STATUS_GUI_PANEL_INVALID_ID = 305,

	// App Volume
	QAR_STATUS_APP_VOLUME_CANNOT_CREATE = 320,
	QAR_STATUS_APP_VOLUME_DOES_NOT_EXIST_LOCALLY = 321,
	QAR_STATUS_APP_VOLUME_CANNOT_CHANGE_STATE = 322,
	QAR_STATUS_APP_VOLUME_BUILDER_VALIDATION_FAILED = 323,
	QAR_STATUS_APP_VOLUME_CHANGE_NOT_PERMITTED = 324,
	QAR_STATUS_APP_VOLUME_INVALID_ID = 325,

	// Channel
	QAR_STATUS_CHANNEL_IS_CLOSED = 401,
	QAR_STATUS_CHANNEL_IS_EMPTY = 403,
	QAR_STATUS_CHANNEL_TAIL_IS_EMPTY = 404,

	// Backend
	QAR_STATUS_BACKEND_UNABLE_CREATE_D3D11_CONTEXT = 500,
	QAR_STATUS_BACKEND_UNABLE_LOAD_DEPENDENCIES = 501,
	QAR_STATUS_BACKEND_FEATURE_NOT_SUPPORTED = 502,
	QAR_STATUS_BACKEND_UNABLE_TO_CREATE_STREAM = 503,
	QAR_STATUS_BACKEND_SERIALIZE_DESERIALIZE_FAILED = 504,
	QAR_STATUS_BACKEND_NO_STREAMING_BACKENDS_SUPPORTED = 505,
	QAR_STATUS_BACKEND_TRANSFORM_NOT_SUPPORTED = 506,
	QAR_STATUS_BACKEND_EXHAUSTED_RETRIES_TO_CREATE_STREAM = 507,
	QAR_STATUS_BACKEND_MEDIA_TRANSFER_ERROR = 508,

	// Media Streaming
	QAR_STATUS_MEDIA_STREAMING_WRONG_FRAME_LAYOUT = 600,
	QAR_STATUS_MEDIA_STREAMING_STREAM_IS_CLOSED = 601,
	QAR_STATUS_MEDIA_STREAMING_STREAM_IS_PAUSED = 602,

	// Graphics APIs
	QAR_STATUS_VULKAN_ERROR = 700,
	QAR_STATUS_DXGI_ERROR = 701,
	QAR_STATUS_GPU_FORMAT_MISMATCH = 702,
	QAR_STATUS_OPENGL_ERROR = 703,
	QAR_STATUS_EGL_ERROR = 704,

	// Rendering Producer
	QAR_STATUS_RENDERING_PRODUCER_INTENT_NON_SUPPORTED = 800,
	QAR_STATUS_RENDERING_PRODUCER_MISSING_POSE_DATA = 801,
	QAR_STATUS_RENDERING_PRODUCER_MISSING_RENDER_REQUEST = 802,
	QAR_STATUS_RENDERING_PRODUCER_UNABLE_TO_DO_BEGIN_FRAME = 803,
	QAR_STATUS_RENDERING_PRODUCER_STREAM_IS_CLOSED = 804,

	// StereoKit
	QAR_STATUS_STEREOKIT_ERROR = 900,

	// OpenXR
	QAR_STATUS_OPENXR_GENERAL_ERROR = 1000, // leave space for around 200 errors
	QAR_STATUS_OPENXR_SESSION_ENDED = 1001,

	// Texture Mixer
	QAR_STATUS_TEXTURE_MIXER_GENERAL_ERROR = 1300,
	QAR_STATUS_TEXTURE_MIXER_INVALID_ID = 1301,
	QAR_STATUS_TEXTURE_MIXER_INVALID_PARAM = 1302
} QarStatusCode;

/**
 * @brief Result returned by most API calls.
 *
 * If code == QAR_STATUS_SUCCESS, error_handle is 0. Otherwise error_handle may
 * reference an internal diagnostic object retrievable via helper functions.
 */
typedef struct QarResult
{
	QarStatusCode code;
	uint32_t error_handle; // 0 if success, non-zero if error
} QarResult;

typedef enum QarAppState
{
	QAR_APP_STATE_UNKNOWN = 0,
	QAR_APP_STATE_INITIALIZING = 1,
	QAR_APP_STATE_RUNNING = 10,
	QAR_APP_STATE_SHUTTING_DOWN = 100
} QarAppState;

/** @brief Time point with variable precision. */
typedef struct QarTimePoint
{
	uint64_t count;
	uint8_t precision; // 0 = milliseconds, 1 = nanoseconds
} QarTimePoint;

// ============================================================================
// MATH TYPES
// ============================================================================

typedef struct QarVector3
{
	float x;
	float y;
	float z;
} QarVector3;

/** @brief Quaternion for rotations. */
typedef struct QarQuaternion
{
	float x;
	float y;
	float z;
	float w;
} QarQuaternion;

/** @brief Pose combining position and orientation. */
typedef struct QarPose
{
	QarQuaternion orientation;
	QarVector3 position;
} QarPose;

typedef struct QarFov
{
	float angle_left;
	float angle_right;
	float angle_up;
	float angle_down;
} QarFov;

typedef struct QarNearFar
{
	float near_plane;
	float far_plane;
} QarNearFar;

// ============================================================================
// TRACKING AND GESTURE TYPES
// ============================================================================

// Hand tracking constants
#define QAR_ORIENTATION_VALID_BIT 0x00000001ULL
#define QAR_POSITION_VALID_BIT 0x00000002ULL
#define QAR_ORIENTATION_TRACKED_BIT 0x00000004ULL
#define QAR_POSITION_TRACKED_BIT 0x00000008ULL

typedef enum QarHandJoint
{
	QAR_HAND_JOINT_PALM_EXT = 0,
	QAR_HAND_JOINT_WRIST_EXT = 1,
	QAR_HAND_JOINT_THUMB_METACARPAL_EXT = 2,
	QAR_HAND_JOINT_THUMB_PROXIMAL_EXT = 3,
	QAR_HAND_JOINT_THUMB_DISTAL_EXT = 4,
	QAR_HAND_JOINT_THUMB_TIP_EXT = 5,
	QAR_HAND_JOINT_INDEX_METACARPAL_EXT = 6,
	QAR_HAND_JOINT_INDEX_PROXIMAL_EXT = 7,
	QAR_HAND_JOINT_INDEX_INTERMEDIATE_EXT = 8,
	QAR_HAND_JOINT_INDEX_DISTAL_EXT = 9,
	QAR_HAND_JOINT_INDEX_TIP_EXT = 10,
	QAR_HAND_JOINT_MIDDLE_METACARPAL_EXT = 11,
	QAR_HAND_JOINT_MIDDLE_PROXIMAL_EXT = 12,
	QAR_HAND_JOINT_MIDDLE_INTERMEDIATE_EXT = 13,
	QAR_HAND_JOINT_MIDDLE_DISTAL_EXT = 14,
	QAR_HAND_JOINT_MIDDLE_TIP_EXT = 15,
	QAR_HAND_JOINT_RING_METACARPAL_EXT = 16,
	QAR_HAND_JOINT_RING_PROXIMAL_EXT = 17,
	QAR_HAND_JOINT_RING_INTERMEDIATE_EXT = 18,
	QAR_HAND_JOINT_RING_DISTAL_EXT = 19,
	QAR_HAND_JOINT_RING_TIP_EXT = 20,
	QAR_HAND_JOINT_LITTLE_METACARPAL_EXT = 21,
	QAR_HAND_JOINT_LITTLE_PROXIMAL_EXT = 22,
	QAR_HAND_JOINT_LITTLE_INTERMEDIATE_EXT = 23,
	QAR_HAND_JOINT_LITTLE_DISTAL_EXT = 24,
	QAR_HAND_JOINT_LITTLE_TIP_EXT = 25,
	QAR_HAND_JOINT_MAX_ENUM_EXT = 0x7FFFFFFF
} QarHandJoint;

typedef struct QarHandJointLocation
{
	uint32_t joint_id;
	uint64_t location_flags;
	QarPose pose;
	float radius;
} QarHandJointLocation;

typedef struct QarHandJointVelocity
{
	uint32_t joint_id;
	uint64_t flags;
	QarVector3 linear_velocity;
	QarVector3 angular_velocity;
} QarHandJointVelocity;

#define QAR_HAND_JOINT_COUNT 26

typedef struct QarHandJoints
{
	bool is_tracked;
	bool is_active;
	QarPose pose;
	QarHandJointLocation joint_locations[QAR_HAND_JOINT_COUNT];
	bool has_velocity;
	QarHandJointVelocity joint_velocities[QAR_HAND_JOINT_COUNT];
} QarHandJoints;

typedef struct QarDeviceHandsWithJoints
{
	QarPeerId device_id;
	QarTimePoint device_timestamp;
	QarHandJoints left_hand;
	QarHandJoints right_hand;
} QarDeviceHandsWithJoints;

// ============================================================================
// GRAPHICS TYPES
// ============================================================================
typedef enum QarGraphicsAPI
{
	QAR_GRAPHICS_API_CPU = 0,
	QAR_GRAPHICS_API_D3D11 = 4,
} QarGraphicsAPI;

typedef enum QarPixelFormat
{
	QAR_PIXEL_FORMAT_R8 = 0,
	QAR_PIXEL_FORMAT_R32_FLOAT = 2,

	QAR_PIXEL_FORMAT_R8G8B8A8 = 51,
	QAR_PIXEL_FORMAT_B8G8R8A8 = 53,

	QAR_PIXEL_FORMAT_D32_FLOAT = 101
} QarPixelFormat;

// ============================================================================
// VIDEO STREAM LAYOUT TYPES
// ============================================================================
typedef enum QarFrameLayout
{
	QAR_FRAME_LAYOUT_SIDE_BY_SIDE = 0,
	QAR_FRAME_LAYOUT_SEPARATED_TEXTURES = 1,
	QAR_FRAME_LAYOUT_LAYERED = 2
} QarFrameLayout;

typedef enum QarVideoFrameViewType
{
	QAR_VIDEO_FRAME_VIEW_TYPE_GRAYSCALE = 0,
	QAR_VIDEO_FRAME_VIEW_TYPE_COLOR = 1,
	QAR_VIDEO_FRAME_VIEW_TYPE_DEPTH = 2
} QarVideoFrameViewType;

typedef enum QarVideoFrameViewEye
{
	QAR_VIDEO_FRAME_VIEW_EYE_NONE = 0,
	QAR_VIDEO_FRAME_VIEW_EYE_LEFT = 10,
	QAR_VIDEO_FRAME_VIEW_EYE_RIGHT = 20
} QarVideoFrameViewEye;

typedef struct QarRenderFrameView
{
	QarVideoFrameViewType data_type;
	QarVideoFrameViewEye eye;
} QarRenderFrameView;

/** @brief Image size (pixels). */
typedef struct QarImageSize
{
	uint32_t width;
	uint32_t height;
} QarImageSize;

/** @brief Texture description including format and array layers. */
typedef struct QarTextureSize
{
	QarPixelFormat format;
	uint32_t width;
	uint32_t height;
	uint32_t array_layers;
} QarTextureSize;

/**
 * @brief Video sub-stream view into a texture.
 *
 * Defines the rectangular region and texture index/layer for a specific view.
 */
typedef struct QarVideoFrameView
{
	uint32_t start_x;
	uint32_t start_y;
	QarImageSize size;
	uint32_t texture_index;
	uint32_t array_layer_index;
	QarPixelFormat texture_format;
	QarVideoFrameViewType data_type;
	QarVideoFrameViewEye eye;
} QarVideoFrameView;

/** @brief Video frame layout with views and backing textures. */
typedef struct QarVideoFrameLayout
{
	QarVideoFrameView views[QAR_MAX_FRAME_VIEWS];
	size_t views_count;
	QarTextureSize textures[QAR_MAX_FRAME_TEXTURES];
	size_t textures_count;
} QarVideoFrameLayout;

// ============================================================================
// VIDEO STREAM FRAME TYPES
// ============================================================================

typedef struct QarVideoTextureCpu
{
	QarTextureSize size;
	uint32_t pitch;
	uint8_t* texture_data;
	size_t texture_data_size;
} QarVideoTextureCpu;

typedef struct QarVideoFrameCpu
{
	QarVideoFrameView texture_views[QAR_MAX_FRAME_VIEWS];
	size_t texture_views_count;
	QarVideoTextureCpu textures[QAR_MAX_FRAME_TEXTURES];
	size_t textures_count;
} QarVideoFrameCpu;

#ifdef QAR_ENABLE_D3D11

typedef struct QarVideoTextureD3D11
{
	QarTextureSize size;
	ID3D11Texture2D* texture;
} QarVideoTextureD3D11;

typedef struct QarDXGIKeyedMutexSync
{
	IDXGIKeyedMutex* mutex;
	uint32_t acquire;
	uint32_t release;
} QarDXGIKeyedMutexSync;

typedef struct QarSyncFrameD3D11
{
	/// Must match number of textures in the frame. If the array is empty, there
	/// is no need for external synchronization.
	QarDXGIKeyedMutexSync texture_sync[QAR_MAX_FRAME_TEXTURES];
	size_t texture_sync_count;
} QarSyncFrameD3D11;

typedef struct QarVideoFrameD3D11
{
	QarVideoFrameView texture_views[QAR_MAX_FRAME_VIEWS];
	size_t texture_views_count;
	QarVideoTextureD3D11 textures[QAR_MAX_FRAME_TEXTURES];
	size_t textures_count;
	QarSyncFrameD3D11 synchronization;
} QarVideoFrameD3D11;

#endif // QAR_ENABLE_D3D11

// ============================================================================
// GUI PANEL TYPES
// ============================================================================

typedef struct QarGuiPanelSize
{
	float width_meters;
	float height_meters;
	float content_scale;
} QarGuiPanelSize;

// Panel state
typedef enum QarGuiPanelState
{
	QAR_GUI_PANEL_STATE_VISIBLE = 0,
	QAR_GUI_PANEL_STATE_MINIMIZED = 1,
	QAR_GUI_PANEL_STATE_HIDDEN = 2,
	QAR_GUI_PANEL_STATE_CLOSED = 3
} QarGuiPanelState;

// ============================================================================
// APP VOLUME TYPES
// ============================================================================

typedef struct QarAppVolumeSize
{
	float width_meters;
	float length_meters;
	float height_meters;
} QarAppVolumeSize;

typedef enum QarAppVolumeLifetimeStatus
{
	QAR_APP_VOLUME_ACTIVE = 0,
	QAR_APP_VOLUME_CLOSED = 1
} QarAppVolumeLifetimeStatus;

typedef struct QarAppVolumeEditingStatus
{
	bool is_being_edited;
	QarPeerId editor_peer;
} QarAppVolumeEditingStatus;

// ============================================================================
// INIT STRUCTURES
// ============================================================================

/** @brief Structure type enumeration for init structures and extensions. */
typedef enum QarStructureType
{
	QAR_STRUCTURE_TYPE_UNKNOWN = 0,
	QAR_STRUCTURE_TYPE_LIBRARY_INIT = 0x0001,
	QAR_STRUCTURE_TYPE_RUNTIME_INIT = 0x1000,
	QAR_STRUCTURE_TYPE_SESSION_CREATE_INIT = 0x2000,
	QAR_STRUCTURE_TYPE_SESSION_JOIN_INIT = 0x2001,
	QAR_STRUCTURE_TYPE_PEER_SPEC_INIT = 0x2002,
	QAR_STRUCTURE_TYPE_SESSION_INVITE_PEER_INIT = 0x2003,
	QAR_STRUCTURE_TYPE_RENDERING_STREAM_SENDER_INIT = 0x3000,
	QAR_STRUCTURE_TYPE_RENDERING_BEGIN_FRAME = 0x3001,
	QAR_STRUCTURE_TYPE_RENDERING_END_FRAME = 0x3002,
	QAR_STRUCTURE_TYPE_STREAM_D3D11_PARAMS_EXT = 0x4000,
	QAR_STRUCTURE_TYPE_GUI_PANEL_INIT = 0x5001,
	QAR_STRUCTURE_TYPE_APP_VOLUME_INIT = 0x5501,
} QarStructureType;

// All data structures have consistent header
typedef struct QarStructureHeader
{
	QarStructureType type;
	void* next; // Extension chain - can be NULL
} QarStructureHeader;

/** @brief Library initialization parameters. */
typedef struct QarLibraryInit
{
	QarStructureHeader header;
	bool enable_console_logging;
	const char* log_folder_path;
} QarLibraryInit;

/** @brief Runtime initialization parameters. */
typedef struct QarRuntimeInit
{
	QarStructureHeader header;
	const char* runtime_binaries_folder_path;
} QarRuntimeInit;

typedef struct QarSessionInvite
{
	QarSessionId session_id;
	uint8_t* data;
	size_t data_size;
} QarSessionInvite;

typedef struct QarPeerSpecInit
{
	QarStructureHeader header;
	QarPeerId* id;			  // Optional, can be NULL
	const char* display_name; // Optional, can be NULL. Will get generated name
	const char* app_version;  // Optional, can be NULL
	const char* app_custom_peer_info; // Optional, can be NULL
} QarPeerSpecInit;

typedef struct QarSessionCreateInit
{
	QarStructureHeader header;
	QarSessionId* session_id; // Optional session ID
} QarSessionCreateInit;

typedef struct QarSessionJoinInit
{
	QarStructureHeader header;
	const uint8_t* invite_data;
	size_t invite_data_size;
	QarPeerSpecInit peer_spec_init;
} QarSessionJoinInit;

typedef struct QarSessionInvitePeerInit
{
	QarStructureHeader header;
	const char* connection_string;
} QarSessionInvitePeerInit;

typedef struct QarGuiPanelInit
{
	QarStructureHeader header;
	const char* display_name;
	QarPose pose;
	QarGuiPanelSize size;
	const QarPeerId* visible_to_peers;
	size_t visible_to_peer_count;
} QarGuiPanelInit;

// TODO: add header extentions for different content types

// Volume initialization parameters
typedef struct QarAppVolumeInit
{
	QarStructureHeader header;
	const char* display_name;
	QarPose pose;
	QarAppVolumeSize size;
	const QarPeerId** initial_peers;
	size_t initial_peer_count;
} QarAppVolumeInit;

typedef struct QarRenderSenderInit
{
	QarStructureHeader header;
	// Required: Who is target peer id this stream should streaming for
	QarPeerId peer_id;

	/// In case of stream failure caused by network issue or other side crash we
	/// will automatically restart stream and try to recreate a stream
	/// transparently in the background
	bool enable_auto_reconnects;

	/// Frame layout configuration
	QarFrameLayout texture_layout;

	/// Array of views in the single video frame
	QarRenderFrameView frame_views[QAR_MAX_FRAME_VIEWS];
	size_t frame_views_count;

	/// Optional app volume ID where this stream will be displayed in the 3D
	/// scene
	QarAppVolumeId* app_volume_id;

	/// Color pixel format
	QarPixelFormat color_format;

	/// Depth pixel format
	QarPixelFormat depth_format;

	QarGraphicsAPI graphics_api;
} QarRenderSenderInit;

#ifdef QAR_ENABLE_D3D11
typedef struct QarStreamParamsD3D11
{
	QarStructureHeader header;
	ID3D11DeviceContext1* d3d11_context;
	ID3D11Device1* d3d11_device;
	uint32_t color_bind_flags; // D3D11_BIND_FLAG
	uint32_t depth_bind_flags; // D3D11_BIND_FLAG
	/// Set to false if you want to handle acquiring and release of texture
	/// keymutexes in your code. This is helpful if you need to copy from chain
	/// of shared textures to start keyed mutex key chain correctly.
	bool acquire_keyed_mutex_sync;
} QarStreamParamsD3D11;
#endif

/** @brief Parameters describing how to present/show a rendered frame. */
typedef struct QarRenderFrameShow
{
	QarStructureHeader header;
	QarNearFar rendered_near_far;
} QarRenderFrameShow;

#ifdef __cplusplus
}
#endif

#endif // QAR_TYPES_H

/**
 * @defgroup qar_c_api QAR Streaming C API
 * @brief Public C API for Quaternar streaming and runtime services.
 * @{ */

// ============================================================================
// DYNAMIC LOADING SUPPORT
// ============================================================================

#ifdef QAR_ENABLE_DYNAMIC_LOADING
/**
 * @defgroup qar_c_dynamic_loading Dynamic Loading
 * @ingroup qar_c_api
 * @brief Dynamic library load/unload helpers for the C API.
 * @{ */
/** @brief Load the shared library from a custom path for dynamic mode. */
static inline bool qar_library_load(const char* library_path);
/** @brief Unload the shared library previously loaded. */
static inline void qar_library_unload(void);
/** @brief Check if the shared library is currently loaded. */
static inline bool qar_is_library_loaded(void);
/** @} */ /* end of qar_c_dynamic_loading */
#endif

// ============================================================================
// LIBRARY INITIALIZATION AND DEINITIALIZATION
// ============================================================================

/**
 * @defgroup qar_c_library Library Initialization
 * @ingroup qar_c_api
 * @{ */
/**
 * @brief Initialize global library state.
 *
 * Must be called once before using any other API. Safe to call from a single
 * thread. Repeated calls without a matching destroy may return an error.
 *
 * @param init Pointer to initialization parameters; must not be NULL.
 * @return QarResult Success or error code with optional diagnostic handle.
 */
static inline QarResult qar_library_init(const QarLibraryInit* init);

/**
 * @brief Deinitialize global library state and free process-wide resources.
 *
 * After this call, no other API should be used until the next
 * qar_library_init().
 *
 * @return QarResult Success or error code.
 */
static inline QarResult qar_library_destroy(void);
/** @} */ /* end of qar_c_library */

// ============================================================================
// ERROR HANDLING TYPES AND FUNCTIONS
// ============================================================================

/**
 * @defgroup qar_c_error Error Handling
 * @ingroup qar_c_api
 * @{ */
// Forward declarations
/** @brief Construct a success result (code = QAR_STATUS_SUCCESS). */
static inline QarResult qar_result_success(void);
/** @brief Construct an error result with code and optional message. */
static inline QarResult
qar_result_error(QarStatusCode code, const char* message);
/** @brief Check if result indicates success. */
static inline bool qar_result_is_success(QarResult result);
/** @brief Check if result indicates failure. */
static inline bool qar_result_is_error(QarResult result);
/** @brief Test a result against a specific status code. */
static inline bool qar_result_has_code(QarResult result, QarStatusCode code);
/**
 * @brief Wrap an existing result with a new code/message for propagation.
 */
static inline QarResult qar_error_wrap_result(
	QarResult inner_result, QarStatusCode new_code, const char* new_message
);
/** @brief Copy a human-readable message into user buffer (NUL-terminated). */
static inline void
qar_result_message(QarResult result, char* out_buffer, size_t buffer_size);

static inline void qar_result_log_if_error(QarResult result);

/** @brief Log the error message if the result is an error. */
#define QAR_ASSUME_SUCCESS(RESULT_EXPR)                                        \
	do                                                                         \
	{                                                                          \
		QarResult qar_result_tmp__ = (RESULT_EXPR);                            \
		if(!qar_result_is_success(qar_result_tmp__))                           \
		{                                                                      \
			qar_result_log_if_error(qar_result_tmp__);                         \
			exit(EXIT_FAILURE);                                                \
		}                                                                      \
	}                                                                          \
	while(0)

/** @} */ /* end of qar_c_error */

// ============================================================================
// CANCELLATION SYSTEM
// ============================================================================

/**
 * @defgroup qar_c_cancel Cancellation
 * @ingroup qar_c_api
 * @{ */
// Forward declarations
/** @brief Create a new cancellation token (non-signaled). */
static inline QarResult qar_cancel_token_create(QarCancelToken** token);
/** @brief Create a token that auto-cancels after timeout_ms. */
static inline QarResult qar_cancel_token_create_with_timeout(
	QarCancelToken** token, uint32_t timeout_ms
);
/** @brief Destroy a token handle without canceling. */
static inline void qar_cancel_token_handle_destroy(QarCancelToken* handle);
/** @brief Signal cancellation on a token. */
static inline QarResult qar_cancel_token_cancel(QarCancelToken* token);
/** @brief Schedule cancellation after timeout_ms. */
static inline QarResult
qar_cancel_token_cancel_after(QarCancelToken* token, uint32_t timeout_ms);
/** @brief Check if token was canceled. */
static inline bool qar_cancel_token_is_cancelled(const QarCancelToken* token);
/** @brief Check if token reached its timeout. */
static inline bool qar_cancel_token_is_timeout(const QarCancelToken* token);

/** @} */ /* end of qar_c_cancel */

// ============================================================================
// RUNTIME MANAGEMENT
// ============================================================================

/**
 * @defgroup qar_c_runtime Runtime
 * @ingroup qar_c_api
 * @{ */
// Forward declarations
/** @brief Destroy a runtime opaque handle without shutting down the runtime. */
static inline void qar_runtime_handle_destroy(QarRuntime* handle);

/**
 * @brief Create a runtime instance that can host sessions and streams.
 *
 * @param init Runtime initialization parameters.
 * @param runtime Out pointer receiving the created runtime handle.
 * @return QarResult Success or error code.
 */
static inline QarResult
qar_runtime_create(const QarRuntimeInit* init, QarRuntime** runtime);

/**
 * @brief Create a new session invitation on a runtime (host side).
 *
 * The resulting invite can be serialized and sent to peers who will join.
 */
static inline QarResult qar_runtime_create_session(
	const QarRuntime* runtime,
	const QarSessionCreateInit* init,
	QarSessionInvite** session
);

static inline void qar_runtime_destroy(QarRuntime* runtime);

/** @} */ /* end of qar_c_runtime */

// ============================================================================
// SESSION MANAGEMENT
// ============================================================================

/**
 * @defgroup qar_c_session Session
 * @ingroup qar_c_api
 * @{ */
// Forward declarations
/** @brief Destroy a session opaque handle without leaving the session. */
static inline void qar_session_handle_destroy(QarSession* handle);

/**
 * @brief Join a session using an invite blob (peer side).
 * @param init Join parameters; includes invite data and peer identity.
 * @param session Out pointer to active session handle.
 */
static inline QarResult
qar_session_join(const QarSessionJoinInit* init, QarSession** session);

/** @brief Get the current session id. */
static inline QarResult
qar_session_get_id(const QarSession* session, QarSessionId* session_id);
/** @brief Size in bytes needed to serialize the invite for this session. */
static inline size_t
qar_session_get_invite_data_size(const QarSession* session);
/** @brief Serialize invite into user-provided buffer. */
static inline QarResult qar_session_get_invite_data(
	const QarSession* session, uint8_t* buffer, size_t buffer_size
);
/** @brief Leave and destroy a session. */
static inline void qar_session_destroy(QarSession* session);

/** Callback invoked when peer invitation completes. */
typedef void (*qar_session_invite_peer_result_callback_t)(
	QarResult status, const QarPeerId* peer_id, void* user_state
);

/** Callback invoked when peer invitation progress updates are available. */
typedef void (*qar_session_invite_peer_update_callback_t)(
	const char* update_message, void* user_state
);

/**
 * @brief Invite a peer to the current session.
 * @param session Active session handle.
 * @param init Invitation parameters containing connection string.
 * @param result_callback Callback receiving completion status and peer id.
 * @param update_callback Optional progress callback (can be NULL).
 * @param user_state User pointer passed to callbacks unchanged.
 */
static inline QarResult qar_session_invite_peer_async(
	QarSession* session,
	const QarSessionInvitePeerInit* init,
	qar_session_invite_peer_result_callback_t result_callback,
	qar_session_invite_peer_update_callback_t update_callback,
	void* user_state
);

/**
 * @brief Build connection string for inviting a HoloLens peer.
 * @param hostname Device hostname (must not be NULL or empty).
 * @param buffer Output buffer for the connection string.
 * @param buffer_size Size of output buffer.
 */
static inline QarResult qar_session_invite_connection_string_hololens(
	const char* hostname, char* buffer, size_t buffer_size
);

/**
 * @brief Build connection string for inviting a Meta Quest device.
 */
static inline QarResult
qar_session_invite_connection_string_quest(char* buffer, size_t buffer_size);

/**
 * @brief Build connection string for inviting a Visualizer peer.
 */
static inline QarResult qar_session_invite_connection_string_visualizer(
	char* buffer, size_t buffer_size
);

/**
 * @brief Build connection string for inviting a ZED camera peer.
 */
static inline QarResult
qar_session_invite_connection_string_zed(char* buffer, size_t buffer_size);

// Session invite management
static inline QarSessionInvite qar_session_invite_default(void);
static inline void qar_session_invite_destroy(QarSessionInvite* invite);

/** @} */ /* end of qar_c_session */

// ============================================================================
// PEER MANAGEMENT
// ============================================================================

/**
 * @defgroup qar_c_peer Peer Management
 * @ingroup qar_c_api
 * @{ */
// Forward declarations
/** @brief Check if a peer spec handle is valid. */
static inline bool qar_peer_spec_handle_is_valid(QarPeerSpec* handle);
/** @brief Destroy a peer spec handle. */
static inline void qar_peer_spec_handle_destroy(QarPeerSpec* handle);
/** @brief Get peer id from spec. */
static inline QarResult
qar_peer_spec_get_id(QarPeerSpec* handle, QarPeerId* out_id);

/** @brief Get display name string into provided buffer. */
static inline QarResult qar_peer_spec_get_display_name(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);

/** @brief Get application version string. */
static inline QarResult qar_peer_spec_get_app_version(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
/** @brief Get custom peer info string (application-defined). */
static inline QarResult qar_peer_spec_get_app_custom_peer_info(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
/** @brief Get application state for this peer. */
static inline QarResult
qar_peer_spec_get_app_state(QarPeerSpec* handle, QarAppState* out_state);
/** @brief Get internal version id string. */
static inline QarResult qar_peer_spec_get_version_id(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
/** @brief Get current room tag string. */
static inline QarResult qar_peer_spec_get_room_tag(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
/** @brief Get spec describing the current device/peer of a session. */
static inline QarResult
qar_session_get_my_spec(const QarSession* session, QarPeerSpec** out_handle);
/** @brief Query number of known peer specs. */
static inline QarResult
qar_query_peer_specs_count(QarSession* session, size_t* out_count);
/** @brief Enumerate peer specs into user-provided array. */
static inline QarResult qar_query_peer_specs(
	QarSession* session,
	QarPeerSpec** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
);
/** @brief Update current peer's display name. */
static inline QarResult
qar_peer_update_display_name(QarSession* session, const char* name);
/** @brief Callback invoked when a peer spec changes. */
typedef void (*qar_peer_update_callback_t)(
	QarPeerSpec* handle, void* user_state
);
/** @brief Subscribe for asynchronous peer spec updates. */
static inline QarResult qar_peer_subscribe_updates(
	QarSession* session,
	qar_peer_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);

/** @} */ /* end of qar_c_peer */

// ============================================================================
// RENDERING STREAM SENDER API
// ============================================================================

/**
 * @defgroup qar_c_render_sender Render Sender
 * @ingroup qar_c_api
 * @{ */
// Forward declarations
/** @brief Destroy a render stream sender handle. */
static inline void qar_render_stream_handle_destroy(QarRenderSender* handle);
/**
 * @brief Create a rendering stream sender bound to a session.
 * @param session Active session handle.
 * @param init Stream configuration (views, formats, target peer, etc.).
 * @param cancel Optional cancellation token for creation.
 * @param out_stream Receives the created stream sender handle.
 */
static inline QarResult qar_render_sender_create(
	QarSession* session,
	QarRenderSenderInit* init,
	QarCancelToken* cancel,
	QarRenderSender** out_stream
);
typedef void (*qar_render_sender_create_callback_t)(
	QarResult status, QarRenderSender* out_stream, void* user_state
);
static inline QarResult qar_render_sender_create_async(
	QarSession* session,
	QarRenderSenderInit* init,
	qar_render_sender_create_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
/** @brief Retrieve the current video frame layout. */
static inline QarResult qar_render_sender_layout(
	QarRenderSender* stream, QarVideoFrameLayout* out_layout
);
/** @brief Request a layout change for subsequent frames. */
static inline QarResult qar_render_sender_change_layout(
	QarRenderSender* stream,
	const QarVideoFrameLayout* layout,
	QarCancelToken* token
);
typedef void (*qar_render_sender_change_layout_callback_t)(
	QarResult status, void* user_state
);
/** @brief Async version of change_layout. */
static inline QarResult qar_render_sender_change_layout_async(
	QarRenderSender* stream,
	const QarVideoFrameLayout* layout,
	qar_render_sender_change_layout_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
/** @brief Get CPU-backed frame write access. */
static inline QarResult qar_render_sender_frame_cpu(
	QarRenderSender* stream, QarVideoFrameCpu* out_frame
);
#ifdef QAR_ENABLE_D3D11
/** @brief Get D3D11-backed frame write access. */
static inline QarResult qar_render_sender_frame_d3d11(
	QarRenderSender* stream, QarVideoFrameD3D11* out_frame
);
#endif

/**
 * @brief Begin producing a new frame.
 *
 * Returns per-frame information such as per-eye pose/FOV to render with.
 */
static inline QarResult qar_render_sender_begin_frame(
	QarRenderSender* stream,
	QarCancelToken* token,
	QarRenderFrameInfo** out_frame_info
);
typedef void (*qar_render_sender_begin_frame_callback_t)(
	QarResult status, QarRenderFrameInfo* frame_info, void* user_state
);
/** @brief Async version of begin_frame. */
static inline QarResult qar_render_sender_begin_frame_async(
	QarRenderSender* stream,
	qar_render_sender_begin_frame_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
/**
 * @brief Submit the rendered frame for presentation/streaming.
 */
static inline QarResult qar_render_sender_show_frame(
	QarRenderSender* stream, const QarRenderFrameShow* frame_show
);
/**
 * @brief Query the last tracked hands data associated with the stream.
 */
static inline QarResult qar_render_sender_last_hands(
	QarRenderSender* stream, QarDeviceHandsWithJoints* out_hands
);

static inline bool
qar_render_frame_info_handle_is_valid(QarRenderFrameInfo* handle);
static inline void
qar_render_frame_info_handle_destroy(QarRenderFrameInfo* handle);
static inline QarResult qar_render_frame_info_get_view_pose(
	QarRenderFrameInfo* handle, size_t view_index, QarPose* out_pose
);
static inline QarResult qar_render_frame_info_get_view_fov(
	QarRenderFrameInfo* handle, size_t view_index, QarFov* out_fov
);

/** @} */ /* end of qar_c_render_sender */

// ============================================================================
// GUI PANELS API
// ============================================================================

/**
 * @defgroup qar_c_gui GUI Panels
 * @ingroup qar_c_api
 * @{ */
// Forward declarations
/** @brief Create a new GUI panel in the session. */
static inline QarResult qar_gui_panels_add_panel(
	QarSession* session,
	const QarGuiPanelInit* init,
	QarGuiPanelId* out_panel_id
);

/** @brief Update the pose of a panel. */
static inline QarResult qar_gui_panels_update_pose(
	QarSession* session, const QarGuiPanelId* id, const QarPose* pose
);

/** @brief Change panel size and content scale. */
static inline QarResult qar_gui_panels_change_size(
	QarSession* session, const QarGuiPanelId* id, const QarGuiPanelSize* size
);

static inline QarResult qar_gui_panels_set_state(
	QarSession* session, const QarGuiPanelId* id, QarGuiPanelState state
);

/** @brief Close and remove a panel. */
static inline QarResult
qar_gui_panels_close_panel(QarSession* session, const QarGuiPanelId* id);

/** @brief Navigate a panel to a given URI (e.g., web content). */
static inline QarResult qar_gui_panels_navigate_to_uri(
	QarSession* session, const QarGuiPanelId* id, const char* uri
);

/** @brief Update which peers can see the panel. */
static inline QarResult qar_gui_panels_update_visible_to(
	QarSession* session,
	const QarGuiPanelId* id,
	const QarPeerId** peer_ids_additions,
	size_t additions_count,
	const QarPeerId** peer_ids_removals,
	size_t removals_count
);
typedef void (*qar_gui_panel_update_callback_t)(
	QarGuiPanel* handle, void* user_state
);
/** @brief Subscribe to updates for all panels. */
static inline QarResult qar_gui_panels_subscribe_updates(
	QarSession* session,
	qar_gui_panel_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
/** @brief Subscribe to updates for a specific panel. */
static inline QarResult qar_gui_panels_subscribe_panel_updates(
	QarSession* session,
	const QarGuiPanelId* id,
	qar_gui_panel_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);

static inline QarResult
qar_query_gui_panels_count(QarSession* session, size_t* out_count);

static inline QarResult qar_query_gui_panels(
	QarSession* session,
	QarGuiPanel** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
);

static inline bool qar_gui_panel_handle_is_valid(QarGuiPanel* handle);

static inline void qar_gui_panel_handle_destroy(QarGuiPanel* handle);

static inline QarResult
qar_gui_panel_get_id(QarGuiPanel* handle, QarGuiPanelId* out_id);

static inline QarResult qar_gui_panel_get_display_name(
	QarGuiPanel* handle, char* out_buffer, size_t buffer_size
);

static inline QarResult
qar_gui_panel_get_pose(QarGuiPanel* handle, QarPose* out_pose);

static inline QarResult
qar_gui_panel_get_size(QarGuiPanel* handle, QarGuiPanelSize* out_size);

static inline QarResult qar_gui_panel_get_content_uri(
	QarGuiPanel* handle, char* out_uri, size_t buffer_size
);

static inline QarResult
qar_gui_panel_get_state(QarGuiPanel* handle, QarGuiPanelState* out_state);

static inline QarResult qar_gui_panel_get_visible_to_peers_count(
	QarGuiPanel* handle, size_t* out_count
);

static inline QarResult qar_gui_panel_get_visible_to_peers(
	QarGuiPanel* handle,
	QarPeerId* out_peers,
	size_t peers_buffer_size,
	size_t* out_peers_written
);

/** @} */ /* end of qar_c_gui */

// ============================================================================
// APP VOLUMES API
// ============================================================================

/**
 * @defgroup qar_c_app_volumes App Volumes
 * @ingroup qar_c_api
 * @{ */
// Forward declarations
/** @brief Create a new app volume. */
static inline QarResult qar_app_volumes_add_volume(
	QarSession* session,
	const QarAppVolumeInit* init,
	QarAppVolumeId* out_volume
);
/** @brief Update pose of an app volume. */
static inline QarResult qar_app_volumes_update_pose(
	QarSession* session, const QarAppVolumeId* volume_id, const QarPose* pose
);
static inline QarResult qar_app_volumes_change_display_name(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const char* display_name
);
/** @brief Resize an app volume. */
static inline QarResult qar_app_volumes_change_size(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const QarAppVolumeSize* size
);
/** @brief Close an app volume. */
static inline QarResult qar_app_volumes_close_volume(
	QarSession* session, const QarAppVolumeId* volume_id
);
/** @brief Update which peers use the volume. */
static inline QarResult qar_app_volumes_update_used_by_peers(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const QarPeerId* peer_additions,
	size_t additions_count,
	const QarPeerId* peer_removals,
	size_t removals_count
);
/** @brief Request editing lock for the volume. */
static inline QarResult qar_app_volumes_start_editing(
	QarSession* session, const QarAppVolumeId* volume_id
);
/** @brief Release editing lock for the volume. */
static inline QarResult qar_app_volumes_stop_editing(
	QarSession* session, const QarAppVolumeId* volume_id
);
typedef void (*qar_app_volume_update_callback_t)(
	QarAppVolume* handle, void* user_state
);
/** @brief Subscribe to updates for app volumes. */
static inline QarResult qar_app_volumes_subscribe_updates(
	QarSession* session,
	qar_app_volume_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
static inline bool qar_app_volume_handle_is_valid(QarAppVolume* handle);
static inline void qar_app_volume_handle_destroy(QarAppVolume* handle);
static inline QarResult
qar_app_volume_get_id(QarAppVolume* handle, QarAppVolumeId* out_id);
/** @brief Get the display name string for an app volume. */
static inline QarResult qar_app_volume_get_display_name(
	QarAppVolume* handle, char* out_buffer, size_t buffer_size
);
/** @brief Get the pose of an app volume. */
static inline QarResult
qar_app_volume_get_pose(QarAppVolume* handle, QarPose* out_pose);
/** @brief Get the current size of an app volume. */
static inline QarResult
qar_app_volume_get_size(QarAppVolume* handle, QarAppVolumeSize* out_size);
/** @brief Get the lifetime status (active/closed). */
static inline QarResult qar_app_volume_get_lifetime_status(
	QarAppVolume* handle, QarAppVolumeLifetimeStatus* out_status
);
/** @brief Get current editing lock status and editor peer. */
static inline QarResult qar_app_volume_get_editing_status(
	QarAppVolume* handle, QarAppVolumeEditingStatus* out_status
);
/** @brief Get number of peers currently using this volume. */
static inline QarResult qar_app_volume_get_used_by_peers_count(
	QarAppVolume* handle, size_t* out_peer_count
);
/** @brief Enumerate peers using the volume into provided buffer. */
static inline QarResult qar_app_volume_get_used_by_peers(
	QarAppVolume* handle,
	QarPeerId* out_peers,
	size_t peers_buffer_size,
	size_t* out_peers_written
);
/** @brief Query number of app volumes known to the session. */
static inline QarResult
qar_query_app_volumes_count(QarSession* session, size_t* out_count);
/** @brief Enumerate app volumes into provided array of handles. */
static inline QarResult qar_query_app_volumes(
	QarSession* session,
	QarAppVolume** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
);

/** @} */ /* end of qar_c_app_volumes */

// ============================================================================
// DEFAULT INITIALIZATION HELPERS
// ============================================================================

/**
 * @defgroup qar_c_defaults Default Inits & Utilities
 * @ingroup qar_c_api
 * @{ */
// Forward declarations
/** @brief Default init for QarRenderSenderInit (sets header, sensible
 * defaults). */
static inline QarRenderSenderInit qar_render_sender_init_default(void);
/** @brief Default init for QarLibraryInit. */
static inline QarLibraryInit qar_library_init_default(void);
/** @brief Default init for QarRuntimeInit. */
static inline QarRuntimeInit qar_runtime_init_default(void);
/** @brief Default init for QarPeerSpecInit. */
static inline QarPeerSpecInit qar_peer_spec_init_default(void);
/** @brief Default init for QarSessionCreateInit. */
static inline QarSessionCreateInit qar_session_create_init_default(void);
/** @brief Default init for QarSessionJoinInit. */
static inline QarSessionJoinInit qar_session_join_init_default(void);
/** @brief Default init for QarSessionInvitePeerInit. */
static inline QarSessionInvitePeerInit
qar_session_invite_peer_init_default(void);
/** @brief Default init for QarRenderFrameShow. */
static inline QarRenderFrameShow qar_render_frame_show_default(void);
/** @brief Default init for QarGuiPanelInit. */
static inline QarGuiPanelInit qar_gui_panel_init_default(void);
/** @brief Default init for QarAppVolumeInit. */
static inline QarAppVolumeInit qar_app_volume_init_default(void);
#ifdef QAR_ENABLE_D3D11
/** @brief Default init for QarStreamParamsD3D11. */
static inline QarStreamParamsD3D11 qar_stream_params_d3d11_default(void);
/** @brief Default init for QarD3D11VideoTexture. */
static inline QarVideoTextureD3D11 qar_video_texture_d3d11_default(void);
/** @brief Default init for QarDXGIKeyedMutexSync. */
static inline QarDXGIKeyedMutexSync qar_dxgi_keyed_mutex_sync_default(void);
/** @brief Default init for QarSyncFrameD3D11. */
static inline QarSyncFrameD3D11 qar_sync_frame_d3d11_default(void);
/** @brief Default init for QarVideoFrameD3D11. */
static inline QarVideoFrameD3D11 qar_video_frame_d3d11_default(void);
#endif

/** @brief Default time point (zero-initialized). */
static inline QarTimePoint qar_time_point_default(void);
/** @brief Default vector3 (0,0,0). */
static inline QarVector3 qar_vector3_default(void);
/** @brief Default quaternion (0,0,0,1). */
static inline QarQuaternion qar_quaternion_default(void);
/** @brief Default pose (identity). */
static inline QarPose qar_pose_default(void);
/** @brief Default FOV (all zeros). */
static inline QarFov qar_fov_default(void);
/** @brief Default near/far (zeros). */
static inline QarNearFar qar_near_far_default(void);

/** @brief Default hand joint location. */
static inline QarHandJointLocation qar_hand_joint_location_default(void);
/** @brief Default hand joint velocity. */
static inline QarHandJointVelocity qar_hand_joint_velocity_default(void);
/** @brief Default hand joints container. */
static inline QarHandJoints qar_hand_joints_default(void);
/** @brief Default device hands-with-joints container. */
static inline QarDeviceHandsWithJoints
qar_device_hand_with_joints_default(void);

/** @brief Default render frame view. */
static inline QarRenderFrameView qar_render_frame_view_default(void);
/** @brief Default image size. */
static inline QarImageSize qar_image_size_default(void);
/** @brief Default texture size. */
static inline QarTextureSize qar_texture_size_default(void);
/** @brief Default video frame view. */
static inline QarVideoFrameView qar_video_frame_view_default(void);
/** @brief Default video frame layout. */
static inline QarVideoFrameLayout qar_video_frame_layout_default(void);
/** @brief Default CPU video texture. */
static inline QarVideoTextureCpu qar_video_texture_cpu_default(void);
/** @brief Default CPU video frame. */
static inline QarVideoFrameCpu qar_video_frame_cpu_default(void);

/** @brief Default GUI panel size. */
static inline QarGuiPanelSize qar_gui_panel_size_default(void);

/** @brief Default app volume size. */
static inline QarAppVolumeSize qar_app_volume_size_default(void);
/** @brief Default app volume editing status. */
static inline QarAppVolumeEditingStatus
qar_app_volume_editing_status_default(void);

/** @brief Zero/invalid peer id. */
static inline QarPeerId qar_peer_id_default(void);
/** @brief Generate a unique peer id. */
static inline QarPeerId qar_peer_id_unique(void);

/** @brief Zero/invalid session id. */
static inline QarSessionId qar_session_id_default(void);
/** @brief Generate a unique session id. */
static inline QarSessionId qar_session_unique(void);

/** @brief Zero/invalid GUI panel id. */
static inline QarGuiPanelId qar_gui_panel_id_default(void);
/** @brief Generate a unique GUI panel id. */
static inline QarGuiPanelId qar_gui_panel_id_unique(void);

/** @brief Zero/invalid app volume id. */
static inline QarAppVolumeId qar_app_volume_id_default(void);
/** @brief Zero/invalid stream id. */
static inline QarStreamId qar_stream_id_default(void);

/** @brief Compare two peer ids for equality. */
static inline bool
qar_peer_id_equals(const QarPeerId* id1, const QarPeerId* id2);
/** @brief Compare two session ids for equality. */
static inline bool
qar_session_identifier_equals(const QarSessionId* id1, const QarSessionId* id2);
/** @brief Compare two app volume ids for equality. */
static inline bool
qar_app_volume_id_equals(const QarAppVolumeId* id1, const QarAppVolumeId* id2);
/** @brief Compare two GUI panel ids for equality. */
static inline bool
qar_gui_panel_id_equals(const QarGuiPanelId* id1, const QarGuiPanelId* id2);

/** @} */ /* end of qar_c_defaults */

/** @} */ /* end of qar_c_api */

#ifdef QAR_ENABLE_DYNAMIC_LOADING
// ============================================================================
// DYNAMIC LOADING IMPLEMENTATION
// ============================================================================
#ifndef QAR_DYNAMIC_LOADING_H
#define QAR_DYNAMIC_LOADING_H

#include <stdio.h>

#ifdef _WIN32

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif
#include <windows.h>

#define QAR_DLL_HANDLE_TYPE HMODULE
#define QAR_LOAD_LIBRARY(path) LoadLibraryA(path)
#define QAR_GET_SYMBOL(handle, name) GetProcAddress(handle, name)
#define QAR_UNLOAD_LIBRARY(handle) FreeLibrary(handle)

static inline HMODULE
qar_loadlib(const char* path)
{
	char abs_path[MAX_PATH];
	DWORD result = GetFullPathNameA(path, MAX_PATH, abs_path, NULL);
	if(result == 0 || result >= MAX_PATH)
	{
		printf(
			"GetFullPathName failed for '%s': Error %lu\n", path, GetLastError()
		);
		return NULL;
	}

	// LOAD_WITH_ALTERED_SEARCH_PATH adds DLL's directory to dependency search
	HMODULE handle = LoadLibraryExA(
		abs_path,
		NULL,
		LOAD_LIBRARY_SEARCH_DEFAULT_DIRS | LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR
	);
	if(!handle)
	{
		DWORD error = GetLastError();
		printf("LoadLibraryEx failed for '%s': Error %lu\n", abs_path, error);
		if(error == ERROR_MOD_NOT_FOUND)
		{
			printf(
				"\nValidate if you have all dependencies and importing correct "
				"dll filename\n"
			);
		}
	}

	return handle;
}
#else

#include <dlfcn.h>
#include <stdlib.h>
#define QAR_DLL_HANDLE_TYPE void*
#define QAR_LOAD_LIBRARY(path) dlopen(path, RTLD_LAZY)
#define QAR_GET_SYMBOL(handle, name) dlsym(handle, name)
#define QAR_UNLOAD_LIBRARY(handle) dlclose(handle)

static inline void*
qar_loadlib(const char* path)
{
	char* abs_path = realpath(path, NULL);
	if(!abs_path)
	{
		printf("realpath failed for '%s': %s\n", path, strerror(errno));
		return NULL;
	}

	// dlopen automatically searches DLL directory for dependencies
	void* handle = dlopen(abs_path, RTLD_LAZY);
	if(!handle)
	{
		printf("dlopen failed for '%s': %s\n", abs_path, dlerror());
	}

	free(abs_path);
	return handle;
}

#endif

// Extern declarations for dynamically loaded module function retrieval
// functions User must add QAR_IMPLEMENT_DYNAMIC_LOADING macro to one of their
// source files
extern void* (*qar_get_function_result_ptr)(int);
extern void* (*qar_get_function_cancelation_token_ptr)(int);
extern void* (*qar_get_function_runtime_ptr)(int);
extern void* (*qar_get_function_session_ptr)(int);
extern void* (*qar_get_function_peer_management_ptr)(int);
extern void* (*qar_get_function_render_stream_sender_ptr)(int);
extern void* (*qar_get_function_gui_panels_ptr)(int);
extern void* (*qar_get_function_app_volumes_ptr)(int);
extern void* (*qar_get_function_types_ptr)(int);

// Macro to implement the extern function pointers
// Add this macro to exactly ONE source file in your application (e.g.,
// main.cpp)
#define QAR_IMPLEMENT_DYNAMIC_LOADING()                                        \
	void* (*qar_get_function_result_ptr)(int) = NULL;                          \
	void* (*qar_get_function_cancelation_token_ptr)(int) = NULL;               \
	void* (*qar_get_function_runtime_ptr)(int) = NULL;                         \
	void* (*qar_get_function_session_ptr)(int) = NULL;                         \
	void* (*qar_get_function_peer_management_ptr)(int) = NULL;                 \
	void* (*qar_get_function_render_stream_sender_ptr)(int) = NULL;            \
	void* (*qar_get_function_gui_panels_ptr)(int) = NULL;                      \
	void* (*qar_get_function_app_volumes_ptr)(int) = NULL;                     \
	void* (*qar_get_function_types_ptr)(int) = NULL;

#define QAR_IMPL_CALL_DYNAMIC_FUNCTION_ERR_PRINT(FUNC_NAME)                    \
	do                                                                         \
	{                                                                          \
		fprintf(                                                               \
			stderr,                                                            \
			"FATAL: %s() called but library not loaded. Call "                 \
			"qar_library_load() first.\n",                                     \
			FUNC_NAME                                                          \
		);                                                                     \
	}                                                                          \
	while(0)

// New macro for calling functions through module function retrieval
#define QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(                                 \
	FUNC_NAME, MODULE_NAME, INDEX, ...                                         \
)                                                                              \
	do                                                                         \
	{                                                                          \
		if(qar_get_function_##MODULE_NAME##_ptr == NULL)                       \
		{                                                                      \
			QAR_IMPL_CALL_DYNAMIC_FUNCTION_ERR_PRINT("qar_" #FUNC_NAME);       \
			abort();                                                           \
		}                                                                      \
		void* func_ptr = qar_get_function_##MODULE_NAME##_ptr(INDEX);          \
		if(func_ptr != NULL)                                                   \
		{                                                                      \
			qar_##FUNC_NAME##_func_t ptr = (qar_##FUNC_NAME##_func_t)func_ptr; \
			return ptr(__VA_ARGS__);                                           \
		}                                                                      \
		QAR_IMPL_CALL_DYNAMIC_FUNCTION_ERR_PRINT("qar_" #FUNC_NAME);           \
		abort();                                                               \
	}                                                                          \
	while(0)

// Void version for functions that don't return values
#define QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(                            \
	FUNC_NAME, MODULE_NAME, INDEX, ...                                         \
)                                                                              \
	do                                                                         \
	{                                                                          \
		if(qar_get_function_##MODULE_NAME##_ptr == NULL)                       \
		{                                                                      \
			QAR_IMPL_CALL_DYNAMIC_FUNCTION_ERR_PRINT("qar_" #FUNC_NAME);       \
			abort();                                                           \
		}                                                                      \
		void* func_ptr = qar_get_function_##MODULE_NAME##_ptr(INDEX);          \
		if(func_ptr != NULL)                                                   \
		{                                                                      \
			qar_##FUNC_NAME##_func_t ptr = (qar_##FUNC_NAME##_func_t)func_ptr; \
			ptr(__VA_ARGS__);                                                  \
			return;                                                            \
		}                                                                      \
		QAR_IMPL_CALL_DYNAMIC_FUNCTION_ERR_PRINT("qar_" #FUNC_NAME);           \
		abort();                                                               \
	}                                                                          \
	while(0)

static QAR_DLL_HANDLE_TYPE qar_library_handle = NULL;

static inline bool
qar_library_load(const char* library_path)
{
	if(qar_library_handle != NULL)
	{
		return true; // Already loaded
	}
	// Load the library
	qar_library_handle = qar_loadlib(library_path);
	if(qar_library_handle == NULL)
	{
		return false;
	}

	// Load each module's init function and call it
	typedef bool (*init_func_t)(void*);
	init_func_t init_result, init_cancelation_token, init_runtime, init_session;
	init_func_t init_peer_management, init_render_stream_sender,
		init_gui_panels, init_app_volumes, init_types;

	init_result = (init_func_t)QAR_GET_SYMBOL(
		qar_library_handle, "qar_init_library_result"
	);
	if(!init_result || !init_result(qar_library_handle))
	{
		goto cleanup;
	}

	init_cancelation_token = (init_func_t)QAR_GET_SYMBOL(
		qar_library_handle, "qar_init_library_cancelation_token"
	);
	if(!init_cancelation_token || !init_cancelation_token(qar_library_handle))
	{
		goto cleanup;
	}

	init_runtime = (init_func_t)QAR_GET_SYMBOL(
		qar_library_handle, "qar_init_library_runtime"
	);
	if(!init_runtime || !init_runtime(qar_library_handle))
	{
		goto cleanup;
	}

	init_session = (init_func_t)QAR_GET_SYMBOL(
		qar_library_handle, "qar_init_library_session"
	);
	if(!init_session || !init_session(qar_library_handle))
	{
		goto cleanup;
	}

	init_peer_management = (init_func_t)QAR_GET_SYMBOL(
		qar_library_handle, "qar_init_library_peer_management"
	);
	if(!init_peer_management || !init_peer_management(qar_library_handle))
	{
		goto cleanup;
	}

	init_render_stream_sender = (init_func_t)QAR_GET_SYMBOL(
		qar_library_handle, "qar_init_library_render_stream_sender"
	);
	if(!init_render_stream_sender
	   || !init_render_stream_sender(qar_library_handle))
	{
		goto cleanup;
	}

	init_gui_panels = (init_func_t)QAR_GET_SYMBOL(
		qar_library_handle, "qar_init_library_gui_panels"
	);
	if(!init_gui_panels || !init_gui_panels(qar_library_handle))
	{
		goto cleanup;
	}

	init_app_volumes = (init_func_t)QAR_GET_SYMBOL(
		qar_library_handle, "qar_init_library_app_volumes"
	);
	if(!init_app_volumes || !init_app_volumes(qar_library_handle))
	{
		goto cleanup;
	}

	init_types = (init_func_t)QAR_GET_SYMBOL(
		qar_library_handle, "qar_init_library_types"
	);
	if(!init_types || !init_types(qar_library_handle))
	{
		goto cleanup;
	}

	// Load function retrieval function pointers into extern variables
	qar_get_function_result_ptr = (void* (*)(int))QAR_GET_SYMBOL(
		qar_library_handle, "qar_get_function_result"
	);
	if(!qar_get_function_result_ptr)
	{
		goto cleanup;
	}

	qar_get_function_cancelation_token_ptr = (void* (*)(int))QAR_GET_SYMBOL(
		qar_library_handle, "qar_get_function_cancelation_token"
	);
	if(!qar_get_function_cancelation_token_ptr)
	{
		goto cleanup;
	}

	qar_get_function_runtime_ptr = (void* (*)(int))QAR_GET_SYMBOL(
		qar_library_handle, "qar_get_function_runtime"
	);
	if(!qar_get_function_runtime_ptr)
	{
		goto cleanup;
	}

	qar_get_function_session_ptr = (void* (*)(int))QAR_GET_SYMBOL(
		qar_library_handle, "qar_get_function_session"
	);
	if(!qar_get_function_session_ptr)
	{
		goto cleanup;
	}

	qar_get_function_peer_management_ptr = (void* (*)(int))QAR_GET_SYMBOL(
		qar_library_handle, "qar_get_function_peer_management"
	);
	if(!qar_get_function_peer_management_ptr)
	{
		goto cleanup;
	}

	qar_get_function_render_stream_sender_ptr = (void* (*)(int))QAR_GET_SYMBOL(
		qar_library_handle, "qar_get_function_render_stream_sender"
	);
	if(!qar_get_function_render_stream_sender_ptr)
	{
		goto cleanup;
	}

	qar_get_function_gui_panels_ptr = (void* (*)(int))QAR_GET_SYMBOL(
		qar_library_handle, "qar_get_function_gui_panels"
	);
	if(!qar_get_function_gui_panels_ptr)
	{
		goto cleanup;
	}

	qar_get_function_app_volumes_ptr = (void* (*)(int))QAR_GET_SYMBOL(
		qar_library_handle, "qar_get_function_app_volumes"
	);
	if(!qar_get_function_app_volumes_ptr)
	{
		goto cleanup;
	}

	qar_get_function_types_ptr = (void* (*)(int))QAR_GET_SYMBOL(
		qar_library_handle, "qar_get_function_types"
	);
	if(!qar_get_function_types_ptr)
	{
		goto cleanup;
	}

	return true;

cleanup:
	QAR_UNLOAD_LIBRARY(qar_library_handle);
	qar_library_handle = NULL;
	return false;
}

static inline void
qar_library_unload(void)
{
	if(qar_library_handle != NULL)
	{
		QAR_UNLOAD_LIBRARY(qar_library_handle);
		qar_library_handle = NULL;
	}

	// Clear all extern function pointers
	qar_get_function_result_ptr = NULL;
	qar_get_function_cancelation_token_ptr = NULL;
	qar_get_function_runtime_ptr = NULL;
	qar_get_function_session_ptr = NULL;
	qar_get_function_peer_management_ptr = NULL;
	qar_get_function_render_stream_sender_ptr = NULL;
	qar_get_function_gui_panels_ptr = NULL;
	qar_get_function_app_volumes_ptr = NULL;
	qar_get_function_types_ptr = NULL;
}

static inline bool
qar_is_library_loaded(void)
{
	return qar_library_handle != NULL;
}

#endif
#endif

#ifndef QAR_STREAMING_C_V0_DETAIL_APP_VOLUMES_H
#define QAR_STREAMING_C_V0_DETAIL_APP_VOLUMES_H

#ifdef QAR_ENABLE_DYNAMIC_LOADING
#endif

// Callback typedefs
typedef void (*qar_app_volume_update_callback_t)(
	QarAppVolume* handle, void* user_state
);

// Function registry enum for app volumes functions
typedef enum QarAppVolumesImplFuncIndex
{
	QAR_IMPL_FUNC_APP_VOLUMES_UPDATE_POSE = 0,
	QAR_IMPL_FUNC_APP_VOLUMES_CHANGE_DISPLAY_NAME,
	QAR_IMPL_FUNC_APP_VOLUMES_CHANGE_SIZE,
	QAR_IMPL_FUNC_APP_VOLUMES_UPDATE_USED_BY_PEERS,
	QAR_IMPL_FUNC_APP_VOLUMES_START_EDITING,
	QAR_IMPL_FUNC_APP_VOLUMES_STOP_EDITING,
	QAR_IMPL_FUNC_APP_VOLUMES_SUBSCRIBE_UPDATES,
	QAR_IMPL_FUNC_APP_VOLUME_HANDLE_IS_VALID,
	QAR_IMPL_FUNC_APP_VOLUME_HANDLE_DESTROY,
	QAR_IMPL_FUNC_APP_VOLUME_GET_ID,
	QAR_IMPL_FUNC_APP_VOLUME_GET_DISPLAY_NAME,
	QAR_IMPL_FUNC_APP_VOLUME_GET_POSE,
	QAR_IMPL_FUNC_APP_VOLUME_GET_SIZE,
	QAR_IMPL_FUNC_APP_VOLUME_GET_LIFETIME_STATUS,
	QAR_IMPL_FUNC_APP_VOLUME_GET_EDITING_STATUS,
	QAR_IMPL_FUNC_APP_VOLUME_GET_USED_BY_PEERS_COUNT,
	QAR_IMPL_FUNC_APP_VOLUME_GET_USED_BY_PEERS,
	QAR_IMPL_FUNC_QUERY_APP_VOLUMES_COUNT,
	QAR_IMPL_FUNC_QUERY_APP_VOLUMES,
	QAR_IMPL_FUNC_APP_VOLUMES_ADD_VOLUME,
	QAR_IMPL_FUNC_APP_VOLUMES_CLOSE_VOLUME,
	QAR_IMPL_FUNC_APP_VOLUMES_COUNT
} QarAppVolumesImplFuncIndex;

// Function names macro for symbol loading (preserves modularity)
#define QAR_APP_VOLUMES_IMPL_FUNCTION_NAMES                                    \
	"qar_impl_app_volumes_update_pose",                                        \
		"qar_impl_app_volumes_change_display_name",                            \
		"qar_impl_app_volumes_change_size",                                    \
		"qar_impl_app_volumes_update_used_by_peers",                           \
		"qar_impl_app_volumes_start_editing",                                  \
		"qar_impl_app_volumes_stop_editing",                                   \
		"qar_impl_app_volumes_subscribe_updates",                              \
		"qar_impl_app_volume_handle_is_valid",                                 \
		"qar_impl_app_volume_handle_destroy", "qar_impl_app_volume_get_id",    \
		"qar_impl_app_volume_get_display_name",                                \
		"qar_impl_app_volume_get_pose", "qar_impl_app_volume_get_size",        \
		"qar_impl_app_volume_get_lifetime_status",                             \
		"qar_impl_app_volume_get_editing_status",                              \
		"qar_impl_app_volume_get_used_by_peers_count",                         \
		"qar_impl_app_volume_get_used_by_peers",                               \
		"qar_impl_query_app_volumes_count", "qar_impl_query_app_volumes",      \
		"qar_impl_app_volumes_add_volume", "qar_impl_app_volumes_close_volume"

#ifdef QAR_ENABLE_DYNAMIC_LOADING
// Function typedefs for app volumes
typedef QarResult (*qar_app_volumes_update_pose_func_t)(
	QarSession* session, const QarAppVolumeId* volume_id, const QarPose* pose
);
typedef QarResult (*qar_app_volumes_change_display_name_func_t)(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const char* display_name
);
typedef QarResult (*qar_app_volumes_change_size_func_t)(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const QarAppVolumeSize* size
);
typedef QarResult (*qar_app_volumes_update_used_by_peers_func_t)(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const QarPeerId* peer_additions,
	size_t additions_count,
	const QarPeerId* peer_removals,
	size_t removals_count
);
typedef QarResult (*qar_app_volumes_start_editing_func_t)(
	QarSession* session, const QarAppVolumeId* volume_id
);
typedef QarResult (*qar_app_volumes_stop_editing_func_t)(
	QarSession* session, const QarAppVolumeId* volume_id
);
typedef QarResult (*qar_app_volumes_subscribe_updates_func_t)(
	QarSession* session,
	qar_app_volume_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);

// App volume handle function typedefs
typedef bool (*qar_app_volume_handle_is_valid_func_t)(QarAppVolume* handle);
typedef void (*qar_app_volume_handle_destroy_func_t)(QarAppVolume* handle);
typedef QarResult (*qar_app_volume_get_id_func_t)(
	QarAppVolume* handle, QarAppVolumeId* out_id
);
typedef QarResult (*qar_app_volume_get_display_name_func_t)(
	QarAppVolume* handle, char* out_buffer, size_t buffer_size
);
typedef QarResult (*qar_app_volume_get_pose_func_t)(
	QarAppVolume* handle, QarPose* out_pose
);
typedef QarResult (*qar_app_volume_get_size_func_t)(
	QarAppVolume* handle, QarAppVolumeSize* out_size
);
typedef QarResult (*qar_app_volume_get_lifetime_status_func_t)(
	QarAppVolume* handle, QarAppVolumeLifetimeStatus* out_status
);
typedef QarResult (*qar_app_volume_get_editing_status_func_t)(
	QarAppVolume* handle, QarAppVolumeEditingStatus* out_status
);
typedef QarResult (*qar_app_volume_get_used_by_peers_count_func_t)(
	QarAppVolume* handle, size_t* out_peer_count
);
typedef QarResult (*qar_app_volume_get_used_by_peers_func_t)(
	QarAppVolume* handle,
	QarPeerId* out_peers,
	size_t peers_buffer_size,
	size_t* out_peers_written
);
typedef QarResult (*qar_query_app_volumes_count_func_t)(
	QarSession* session, size_t* out_count
);
typedef QarResult (*qar_query_app_volumes_func_t)(
	QarSession* session,
	QarAppVolume** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
);
typedef QarResult (*qar_app_volumes_add_volume_func_t)(
	QarSession* session,
	const QarAppVolumeInit* init,
	QarAppVolumeId* out_volume
);
typedef QarResult (*qar_app_volumes_close_volume_func_t)(
	QarSession* session, const QarAppVolumeId* volume_id
);
#else

// Implementation function declarations
QAR_C_API QarResult qar_impl_app_volumes_update_pose(
	QarSession* session, const QarAppVolumeId* volume_id, const QarPose* pose
);
QAR_C_API QarResult qar_impl_app_volumes_change_display_name(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const char* display_name
);
QAR_C_API QarResult qar_impl_app_volumes_change_size(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const QarAppVolumeSize* size
);
QAR_C_API QarResult qar_impl_app_volumes_update_used_by_peers(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const QarPeerId* peer_additions,
	size_t additions_count,
	const QarPeerId* peer_removals,
	size_t removals_count
);
QAR_C_API QarResult qar_impl_app_volumes_start_editing(
	QarSession* session, const QarAppVolumeId* volume_id
);
QAR_C_API QarResult qar_impl_app_volumes_stop_editing(
	QarSession* session, const QarAppVolumeId* volume_id
);
QAR_C_API QarResult qar_impl_app_volumes_subscribe_updates(
	QarSession* session,
	qar_app_volume_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);

// App volume handle implementation functions
QAR_C_API bool qar_impl_app_volume_handle_is_valid(QarAppVolume* handle);
QAR_C_API void qar_impl_app_volume_handle_destroy(QarAppVolume* handle);
QAR_C_API QarResult
qar_impl_app_volume_get_id(QarAppVolume* handle, QarAppVolumeId* out_id);
QAR_C_API QarResult qar_impl_app_volume_get_display_name(
	QarAppVolume* handle, char* out_buffer, size_t buffer_size
);
QAR_C_API QarResult
qar_impl_app_volume_get_pose(QarAppVolume* handle, QarPose* out_pose);
QAR_C_API QarResult
qar_impl_app_volume_get_size(QarAppVolume* handle, QarAppVolumeSize* out_size);
QAR_C_API QarResult qar_impl_app_volume_get_lifetime_status(
	QarAppVolume* handle, QarAppVolumeLifetimeStatus* out_status
);
QAR_C_API QarResult qar_impl_app_volume_get_editing_status(
	QarAppVolume* handle, QarAppVolumeEditingStatus* out_status
);
QAR_C_API QarResult qar_impl_app_volume_get_used_by_peers_count(
	QarAppVolume* handle, size_t* out_peer_count
);
QAR_C_API QarResult qar_impl_app_volume_get_used_by_peers(
	QarAppVolume* handle,
	QarPeerId* out_peers,
	size_t peers_buffer_size,
	size_t* out_peers_written
);
QAR_C_API QarResult
qar_impl_query_app_volumes_count(QarSession* session, size_t* out_count);
QAR_C_API QarResult qar_impl_query_app_volumes(
	QarSession* session,
	QarAppVolume** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
);
QAR_C_API QarResult qar_impl_app_volumes_add_volume(
	QarSession* session,
	const QarAppVolumeInit* init,
	QarAppVolumeId* out_volume
);
QAR_C_API QarResult qar_impl_app_volumes_close_volume(
	QarSession* session, const QarAppVolumeId* volume_id
);
#endif
// ============================================================================
// APP VOLUMES DISPATCH FUNCTIONS
// ============================================================================

static inline QarResult
qar_app_volumes_update_pose(
	QarSession* session, const QarAppVolumeId* volume_id, const QarPose* pose
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volumes_update_pose,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUMES_UPDATE_POSE,
		session,
		volume_id,
		pose
	);
#else
	return qar_impl_app_volumes_update_pose(session, volume_id, pose);
#endif
}

static inline QarResult
qar_app_volumes_change_display_name(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const char* display_name
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volumes_change_display_name,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUMES_CHANGE_DISPLAY_NAME,
		session,
		volume_id,
		display_name
	);
#else
	return qar_impl_app_volumes_change_display_name(
		session, volume_id, display_name
	);
#endif
}

static inline QarResult
qar_app_volumes_change_size(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const QarAppVolumeSize* size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volumes_change_size,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUMES_CHANGE_SIZE,
		session,
		volume_id,
		size
	);
#else
	return qar_impl_app_volumes_change_size(session, volume_id, size);
#endif
}

static inline QarResult
qar_app_volumes_update_used_by_peers(
	QarSession* session,
	const QarAppVolumeId* volume_id,
	const QarPeerId* peer_additions,
	size_t additions_count,
	const QarPeerId* peer_removals,
	size_t removals_count
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volumes_update_used_by_peers,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUMES_UPDATE_USED_BY_PEERS,
		session,
		volume_id,
		peer_additions,
		additions_count,
		peer_removals,
		removals_count
	);
#else
	return qar_impl_app_volumes_update_used_by_peers(
		session,
		volume_id,
		peer_additions,
		additions_count,
		peer_removals,
		removals_count
	);
#endif
}

static inline QarResult
qar_app_volumes_start_editing(
	QarSession* session, const QarAppVolumeId* volume_id
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volumes_start_editing,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUMES_START_EDITING,
		session,
		volume_id
	);
#else
	return qar_impl_app_volumes_start_editing(session, volume_id);
#endif
}

static inline QarResult
qar_app_volumes_stop_editing(
	QarSession* session, const QarAppVolumeId* volume_id
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volumes_stop_editing,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUMES_STOP_EDITING,
		session,
		volume_id
	);
#else
	return qar_impl_app_volumes_stop_editing(session, volume_id);
#endif
}

static inline QarResult
qar_app_volumes_subscribe_updates(
	QarSession* session,
	qar_app_volume_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volumes_subscribe_updates,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUMES_SUBSCRIBE_UPDATES,
		session,
		callback,
		user_state,
		token
	);
#else
	return qar_impl_app_volumes_subscribe_updates(
		session, callback, user_state, token
	);
#endif
}

// App volume handle dispatch functions
static inline bool
qar_app_volume_handle_is_valid(QarAppVolume* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volume_handle_is_valid,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_HANDLE_IS_VALID,
		handle
	);
#else
	return qar_impl_app_volume_handle_is_valid(handle);
#endif
}

static inline void
qar_app_volume_handle_destroy(QarAppVolume* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		app_volume_handle_destroy,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_HANDLE_DESTROY,
		handle
	);
#else
	qar_impl_app_volume_handle_destroy(handle);
#endif
}

static inline QarResult
qar_app_volume_get_id(QarAppVolume* handle, QarAppVolumeId* out_id)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volume_get_id,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_GET_ID,
		handle,
		out_id
	);
#else
	return qar_impl_app_volume_get_id(handle, out_id);
#endif
}

static inline QarResult
qar_app_volume_get_display_name(
	QarAppVolume* handle, char* out_buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volume_get_display_name,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_GET_DISPLAY_NAME,
		handle,
		out_buffer,
		buffer_size
	);
#else
	return qar_impl_app_volume_get_display_name(
		handle, out_buffer, buffer_size
	);
#endif
}

static inline QarResult
qar_app_volume_get_pose(QarAppVolume* handle, QarPose* out_pose)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volume_get_pose,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_GET_POSE,
		handle,
		out_pose
	);
#else
	return qar_impl_app_volume_get_pose(handle, out_pose);
#endif
}

static inline QarResult
qar_app_volume_get_size(QarAppVolume* handle, QarAppVolumeSize* out_size)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volume_get_size,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_GET_SIZE,
		handle,
		out_size
	);
#else
	return qar_impl_app_volume_get_size(handle, out_size);
#endif
}

static inline QarResult
qar_app_volume_get_lifetime_status(
	QarAppVolume* handle, QarAppVolumeLifetimeStatus* out_status
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volume_get_lifetime_status,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_GET_LIFETIME_STATUS,
		handle,
		out_status
	);
#else
	return qar_impl_app_volume_get_lifetime_status(handle, out_status);
#endif
}

static inline QarResult
qar_app_volume_get_editing_status(
	QarAppVolume* handle, QarAppVolumeEditingStatus* out_status
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volume_get_editing_status,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_GET_EDITING_STATUS,
		handle,
		out_status
	);
#else
	return qar_impl_app_volume_get_editing_status(handle, out_status);
#endif
}

static inline QarResult
qar_app_volume_get_used_by_peers_count(
	QarAppVolume* handle, size_t* out_peer_count
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volume_get_used_by_peers_count,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_GET_USED_BY_PEERS_COUNT,
		handle,
		out_peer_count
	);
#else
	return qar_impl_app_volume_get_used_by_peers_count(handle, out_peer_count);
#endif
}

static inline QarResult
qar_app_volume_get_used_by_peers(
	QarAppVolume* handle,
	QarPeerId* out_peers,
	size_t peers_buffer_size,
	size_t* out_peers_written
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volume_get_used_by_peers,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUME_GET_USED_BY_PEERS,
		handle,
		out_peers,
		peers_buffer_size,
		out_peers_written
	);
#else
	return qar_impl_app_volume_get_used_by_peers(
		handle, out_peers, peers_buffer_size, out_peers_written
	);
#endif
}

static inline QarResult
qar_query_app_volumes_count(QarSession* session, size_t* out_count)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		query_app_volumes_count,
		app_volumes,
		QAR_IMPL_FUNC_QUERY_APP_VOLUMES_COUNT,
		session,
		out_count
	);
#else
	return qar_impl_query_app_volumes_count(session, out_count);
#endif
}

static inline QarResult
qar_query_app_volumes(
	QarSession* session,
	QarAppVolume** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		query_app_volumes,
		app_volumes,
		QAR_IMPL_FUNC_QUERY_APP_VOLUMES,
		session,
		out_handles,
		handles_buffer_size,
		out_handles_written
	);
#else
	return qar_impl_query_app_volumes(
		session, out_handles, handles_buffer_size, out_handles_written
	);
#endif
}

static inline QarResult
qar_app_volumes_add_volume(
	QarSession* session,
	const QarAppVolumeInit* init,
	QarAppVolumeId* out_volume
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volumes_add_volume,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUMES_ADD_VOLUME,
		session,
		init,
		out_volume
	);
#else
	return qar_impl_app_volumes_add_volume(session, init, out_volume);
#endif
}

static inline QarResult
qar_app_volumes_close_volume(
	QarSession* session, const QarAppVolumeId* volume_id
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		app_volumes_close_volume,
		app_volumes,
		QAR_IMPL_FUNC_APP_VOLUMES_CLOSE_VOLUME,
		session,
		volume_id
	);
#else
	return qar_impl_app_volumes_close_volume(session, volume_id);
#endif
}

#endif // QAR_STREAMING_C_V0_DETAIL_APP_VOLUMES_H
#ifndef QAR_STREAMING_C_V0_DETAIL_BASIC_TYPES_H
#define QAR_STREAMING_C_V0_DETAIL_BASIC_TYPES_H

#ifdef QAR_ENABLE_DYNAMIC_LOADING
#endif

// ============================================================================
// DYNAMIC LOADING IMPLEMENTATION FOR BASIC TYPES
// ============================================================================

// Function registry enum for basic types non-inline functions
typedef enum QarTypesImplFuncIndex
{
	QAR_TYPES_IMPL_FUNC_PEER_ID_UNIQUE = 0,
	QAR_TYPES_IMPL_FUNC_SESSION_UNIQUE,
	QAR_TYPES_IMPL_FUNC_GUI_PANEL_ID_UNIQUE,
	QAR_TYPES_IMPL_FUNC_COUNT
} QarTypesImplFuncIndex;

#ifdef QAR_ENABLE_DYNAMIC_LOADING
// Function typedefs for basic types non-inline functions
typedef QarPeerId (*qar_peer_id_unique_func_t)(void);
typedef QarSessionId (*qar_session_unique_func_t)(void);
typedef QarGuiPanelId (*qar_gui_panel_id_unique_func_t)(void);

#else
// Implementation function declarations
QAR_C_API QarPeerId qar_impl_peer_id_unique(void);
QAR_C_API QarSessionId qar_impl_session_unique(void);
QAR_C_API QarGuiPanelId qar_impl_gui_panel_id_unique(void);
#endif

// Function names macro for symbol loading (preserves modularity)
#define QAR_TYPES_IMPL_FUNCTION_NAMES                                          \
	"qar_impl_peer_id_unique", "qar_impl_session_unique",                      \
		"qar_impl_gui_panel_id_unique"

// ============================================================================
// DISPATCH FUNCTION IMPLEMENTATIONS FOR BASIC TYPES
// ============================================================================

// Basic types dispatch functions
static inline QarPeerId
qar_peer_id_unique(void)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_id_unique, types, QAR_TYPES_IMPL_FUNC_PEER_ID_UNIQUE
	);
#else
	return qar_impl_peer_id_unique();
#endif
}

static inline QarSessionId
qar_session_unique(void)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_unique, types, QAR_TYPES_IMPL_FUNC_SESSION_UNIQUE
	);
#else
	return qar_impl_session_unique();
#endif
}

static inline QarGuiPanelId
qar_gui_panel_id_unique(void)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_id_unique, types, QAR_TYPES_IMPL_FUNC_GUI_PANEL_ID_UNIQUE
	);
#else
	return qar_impl_gui_panel_id_unique();
#endif
}

// ============================================================================
// INLINE FUNCTION IMPLEMENTATIONS
// ============================================================================

static inline bool
qar_peer_id_equals(const QarPeerId* id1, const QarPeerId* id2)
{
	if(id1 == NULL || id2 == NULL)
	{
		return false;
	}

	for(size_t i = 0; i < QAR_MAX_ID_LENGTH; i++)
	{
		if(id1->data[i] != id2->data[i])
		{
			return false;
		}
	}
	return true;
}

static inline bool
qar_session_identifier_equals(const QarSessionId* id1, const QarSessionId* id2)
{
	if(id1 == NULL || id2 == NULL)
	{
		return false;
	}

	for(size_t i = 0; i < QAR_MAX_ID_LENGTH; i++)
	{
		if(id1->data[i] != id2->data[i])
		{
			return false;
		}
	}
	return true;
}

static inline bool
qar_app_volume_id_equals(const QarAppVolumeId* id1, const QarAppVolumeId* id2)
{
	if(id1 == NULL || id2 == NULL)
	{
		return false;
	}

	for(size_t i = 0; i < QAR_MAX_ID_LENGTH; i++)
	{
		if(id1->data[i] != id2->data[i])
		{
			return false;
		}
	}
	return true;
}

static inline bool
qar_gui_panel_id_equals(const QarGuiPanelId* id1, const QarGuiPanelId* id2)
{
	if(id1 == NULL || id2 == NULL)
	{
		return false;
	}

	for(size_t i = 0; i < QAR_MAX_ID_LENGTH; i++)
	{
		if(id1->data[i] != id2->data[i])
		{
			return false;
		}
	}
	return true;
}

#endif

#ifndef QAR_STREAMING_C_V0_DETAIL_CANCELATION_TOKEN_H
#define QAR_STREAMING_C_V0_DETAIL_CANCELATION_TOKEN_H

#ifdef QAR_ENABLE_DYNAMIC_LOADING
#endif

// Function registry enum for cancelation token functions
typedef enum QarCancelationTokenImplFuncIndex
{
	QAR_IMPL_FUNC_CANCEL_TOKEN_CREATE = 0,
	QAR_IMPL_FUNC_CANCEL_TOKEN_CREATE_WITH_TIMEOUT,
	QAR_IMPL_FUNC_CANCEL_TOKEN_HANDLE_DESTROY,
	QAR_IMPL_FUNC_CANCEL_TOKEN_CANCEL,
	QAR_IMPL_FUNC_CANCEL_TOKEN_CANCEL_AFTER,
	QAR_IMPL_FUNC_CANCEL_TOKEN_IS_CANCELLED,
	QAR_IMPL_FUNC_CANCEL_TOKEN_IS_TIMEOUT,
	QAR_IMPL_FUNC_CANCEL_TOKEN_COUNT
} QarCancelationTokenImplFuncIndex;

// Function names macro for symbol loading (preserves modularity)
#define QAR_CANCELATION_TOKEN_IMPL_FUNCTION_NAMES                              \
	"qar_impl_cancel_token_create",                                            \
		"qar_impl_cancel_token_create_with_timeout",                           \
		"qar_impl_cancel_token_handle_destroy",                                \
		"qar_impl_cancel_token_cancel", "qar_impl_cancel_token_cancel_after",  \
		"qar_impl_cancel_token_is_cancelled",                                  \
		"qar_impl_cancel_token_is_timeout"

#ifdef QAR_ENABLE_DYNAMIC_LOADING
// Function typedefs for cancellation system
typedef QarResult (*qar_cancel_token_create_func_t)(QarCancelToken** token);
typedef QarResult (*qar_cancel_token_create_with_timeout_func_t)(
	QarCancelToken** token, uint32_t timeout_ms
);
typedef void (*qar_cancel_token_handle_destroy_func_t)(QarCancelToken* handle);
typedef QarResult (*qar_cancel_token_cancel_func_t)(QarCancelToken* token);
typedef QarResult (*qar_cancel_token_cancel_after_func_t)(
	QarCancelToken* token, uint32_t timeout_ms
);
typedef bool (*qar_cancel_token_is_cancelled_func_t)(
	const QarCancelToken* token
);
typedef bool (*qar_cancel_token_is_timeout_func_t)(const QarCancelToken* token);
#else

// Static implementation function declarations
QAR_C_API QarResult qar_impl_cancel_token_create(QarCancelToken** token);
QAR_C_API QarResult qar_impl_cancel_token_create_with_timeout(
	QarCancelToken** token, uint32_t timeout_ms
);
QAR_C_API void qar_impl_cancel_token_handle_destroy(QarCancelToken* handle);
QAR_C_API QarResult qar_impl_cancel_token_cancel(QarCancelToken* token);
QAR_C_API QarResult
qar_impl_cancel_token_cancel_after(QarCancelToken* token, uint32_t timeout_ms);
QAR_C_API bool qar_impl_cancel_token_is_cancelled(const QarCancelToken* token);
QAR_C_API bool qar_impl_cancel_token_is_timeout(const QarCancelToken* token);
#endif
// Cancellation system dispatch functions
static inline QarResult
qar_cancel_token_create(QarCancelToken** token)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		cancel_token_create,
		cancelation_token,
		QAR_IMPL_FUNC_CANCEL_TOKEN_CREATE,
		token
	);
#else
	return qar_impl_cancel_token_create(token);
#endif
}

static inline QarResult
qar_cancel_token_create_with_timeout(
	QarCancelToken** token, uint32_t timeout_ms
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		cancel_token_create_with_timeout,
		cancelation_token,
		QAR_IMPL_FUNC_CANCEL_TOKEN_CREATE_WITH_TIMEOUT,
		token,
		timeout_ms
	);
#else
	return qar_impl_cancel_token_create_with_timeout(token, timeout_ms);
#endif
}

static inline void
qar_cancel_token_handle_destroy(QarCancelToken* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		cancel_token_handle_destroy,
		cancelation_token,
		QAR_IMPL_FUNC_CANCEL_TOKEN_HANDLE_DESTROY,
		handle
	);
#else
	qar_impl_cancel_token_handle_destroy(handle);
#endif
}

static inline QarResult
qar_cancel_token_cancel(QarCancelToken* token)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		cancel_token_cancel,
		cancelation_token,
		QAR_IMPL_FUNC_CANCEL_TOKEN_CANCEL,
		token
	);
#else
	return qar_impl_cancel_token_cancel(token);
#endif
}

static inline QarResult
qar_cancel_token_cancel_after(QarCancelToken* token, uint32_t timeout_ms)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		cancel_token_cancel_after,
		cancelation_token,
		QAR_IMPL_FUNC_CANCEL_TOKEN_CANCEL_AFTER,
		token,
		timeout_ms
	);
#else
	return qar_impl_cancel_token_cancel_after(token, timeout_ms);
#endif
}

static inline bool
qar_cancel_token_is_cancelled(const QarCancelToken* token)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		cancel_token_is_cancelled,
		cancelation_token,
		QAR_IMPL_FUNC_CANCEL_TOKEN_IS_CANCELLED,
		token
	);
#else
	return qar_impl_cancel_token_is_cancelled(token);
#endif
}

static inline bool
qar_cancel_token_is_timeout(const QarCancelToken* token)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		cancel_token_is_timeout,
		cancelation_token,
		QAR_IMPL_FUNC_CANCEL_TOKEN_IS_TIMEOUT,
		token
	);
#else
	return qar_impl_cancel_token_is_timeout(token);
#endif
}

#endif // QAR_STREAMING_C_V0_DETAIL_CANCELATION_TOKEN_H
#ifndef QAR_STREAMING_C_V0_DETAIL_DEFAULT_INITS_H
#define QAR_STREAMING_C_V0_DETAIL_DEFAULT_INITS_H

static inline QarTimePoint
qar_time_point_default(void)
{
	QarTimePoint tp = { 0, 0 };
	return tp;
}

static inline QarVector3
qar_vector3_default(void)
{
	QarVector3 v = { 0.0f, 0.0f, 0.0f };
	return v;
}

static inline QarQuaternion
qar_quaternion_default(void)
{
	QarQuaternion q = { 0.0f, 0.0f, 0.0f, 1.0f };
	return q;
}

static inline QarPose
qar_pose_default(void)
{
	QarPose p = { qar_quaternion_default(), qar_vector3_default() };
	return p;
}

static inline QarFov
qar_fov_default(void)
{
	QarFov f = { -0.785f, 0.785f, 0.785f, -0.785f };
	return f;
}

static inline QarNearFar
qar_near_far_default(void)
{
	QarNearFar nf = { 0.1f, 100.0f };
	return nf;
}

static inline QarPeerId
qar_peer_id_default(void)
{
	QarPeerId id = QAR_ID_DEFAULT;
	return id;
}

static inline QarSessionId
qar_session_id_default(void)
{
	QarSessionId id = QAR_ID_DEFAULT;
	return id;
}

static inline QarGuiPanelId
qar_gui_panel_id_default(void)
{
	QarGuiPanelId id = QAR_ID_DEFAULT;
	return id;
}

static inline QarAppVolumeId
qar_app_volume_id_default(void)
{
	QarAppVolumeId id = QAR_ID_DEFAULT;
	return id;
}

static inline QarStreamId
qar_stream_id_default(void)
{
	QarStreamId id = QAR_ID_DEFAULT;
	return id;
}

static inline QarHandJointLocation
qar_hand_joint_location_default(void)
{
	QarHandJointLocation hjl = { 0, 0, qar_pose_default(), 0.0f };
	return hjl;
}

static inline QarHandJointVelocity
qar_hand_joint_velocity_default(void)
{
	QarHandJointVelocity hjv = {
		0, 0, qar_vector3_default(), qar_vector3_default()
	};
	return hjv;
}

static inline QarHandJoints
qar_hand_joints_default(void)
{
	QarHandJoints hj = {
		false, false, qar_pose_default(), { 0 }, false, { 0 }
	};
	// Initialize all joint locations and velocities to default values
	for(int i = 0; i < QAR_HAND_JOINT_COUNT; i++)
	{
		hj.joint_locations[i] = qar_hand_joint_location_default();
		hj.joint_velocities[i] = qar_hand_joint_velocity_default();
	}
	return hj;
}

static inline QarDeviceHandsWithJoints
qar_device_hand_with_joints_default(void)
{
	QarDeviceHandsWithJoints hands = {
		{ 0 },					   // device_id
		{ 0, 0 },				   // device_timestamp
		qar_hand_joints_default(), // left_hand
		qar_hand_joints_default()  // right_hand
	};
	return hands;
}

static inline QarRenderFrameView
qar_render_frame_view_default(void)
{
	QarRenderFrameView view = { QAR_VIDEO_FRAME_VIEW_TYPE_GRAYSCALE,
								QAR_VIDEO_FRAME_VIEW_EYE_NONE };
	return view;
}

static inline QarImageSize
qar_image_size_default(void)
{
	QarImageSize size = { 0, 0 };
	return size;
}

static inline QarTextureSize
qar_texture_size_default(void)
{
	QarTextureSize size = {
		QAR_PIXEL_FORMAT_R8, // format
		0,					 // width
		0,					 // height
		1					 // array_layers
	};
	return size;
}

static inline QarVideoFrameView
qar_video_frame_view_default(void)
{
	QarVideoFrameView view = {
		0,									 // start_x
		0,									 // start_y
		{ 0, 0 },							 // size
		0,									 // texture_index
		0,									 // array_layer_index
		QAR_PIXEL_FORMAT_R8,				 // texture_format
		QAR_VIDEO_FRAME_VIEW_TYPE_GRAYSCALE, // data_type
		QAR_VIDEO_FRAME_VIEW_EYE_NONE		 // eye
	};
	return view;
}

static inline QarVideoFrameLayout
qar_video_frame_layout_default(void)
{
	QarVideoFrameLayout layout = {
		{ 0 }, // views (initialize array to zero)
		0,	   // views_count
		{},	   // textures (initialize array to zero)
		0	   // textures_count
	};
	return layout;
}

static inline QarVideoTextureCpu
qar_video_texture_cpu_default(void)
{
	QarVideoTextureCpu texture = {
		qar_texture_size_default(), // size
		0,							// pitch
		NULL,						// texture_data
		0							// texture_data_size
	};
	return texture;
}

static inline QarVideoFrameCpu
qar_video_frame_cpu_default(void)
{
	QarVideoFrameCpu frame = {
		{ 0 }, // texture_views
		0,	   // texture_views_count
		{},	   // textures
		0	   // textures_count
	};
	return frame;
}

#ifdef QAR_ENABLE_D3D11
static inline QarVideoTextureD3D11
qar_video_texture_d3d11_default(void)
{
	QarVideoTextureD3D11 texture = {
		qar_texture_size_default(), // size
		NULL						// texture
	};
	return texture;
}

static inline QarDXGIKeyedMutexSync
qar_dxgi_keyed_mutex_sync_default(void)
{
	QarDXGIKeyedMutexSync sync = {
		NULL, // mutex
		0,	  // acquire
		0	  // release
	};
	return sync;
}

static inline QarSyncFrameD3D11
qar_sync_frame_d3d11_default(void)
{
	QarSyncFrameD3D11 sync = {
		NULL, // texture_sync
		0	  // texture_sync_count
	};
	return sync;
}

static inline QarVideoFrameD3D11
qar_video_frame_d3d11_default(void)
{
	QarVideoFrameD3D11 frame = {
		{ 0 },						   // texture_views
		0,							   // texture_views_count
		{},							   // textures
		0,							   // textures_count
		qar_sync_frame_d3d11_default() // synchronization
	};
	return frame;
}
#endif // QAR_ENABLE_D3D11

static inline QarGuiPanelSize
qar_gui_panel_size_default(void)
{
	QarGuiPanelSize gps = { 1.0f, 1.0f, 1.0f };
	return gps;
}

static inline QarAppVolumeSize
qar_app_volume_size_default(void)
{
	QarAppVolumeSize avs = { 1.0f, 1.0f, 1.0f };
	return avs;
}

static inline QarAppVolumeEditingStatus
qar_app_volume_editing_status_default(void)
{
	QarAppVolumeEditingStatus aves = { false, { 0 } };
	return aves;
}

// ============================================================================
// DEFAULT INITIALIZATION HELPER FUNCTIONS
// ============================================================================

static inline QarLibraryInit
qar_library_init_default(void)
{
	QarLibraryInit init = {
		{ QAR_STRUCTURE_TYPE_LIBRARY_INIT, NULL }, // header
		true,									   // enable_console_logging
		NULL									   // log_folder_path
	};
	return init;
}

static inline QarRuntimeInit
qar_runtime_init_default(void)
{
	QarRuntimeInit init = {
		{ QAR_STRUCTURE_TYPE_RUNTIME_INIT, NULL }, // header
		NULL // runtime_binaries_folder_path
	};
	return init;
}

static inline QarPeerSpecInit
qar_peer_spec_init_default(void)
{
	QarPeerSpecInit init = {
		{ QAR_STRUCTURE_TYPE_PEER_SPEC_INIT, NULL }, // header
		NULL,										 // id
		NULL,										 // display_name
		NULL,										 // app_version
		NULL										 // app_custom_peer_info
	};
	return init;
}

static inline QarSessionCreateInit
qar_session_create_init_default(void)
{
	QarSessionCreateInit init = {
		{ QAR_STRUCTURE_TYPE_SESSION_CREATE_INIT, NULL }, // header
		NULL,											  // session_id
	};
	return init;
}

static inline QarSessionJoinInit
qar_session_join_init_default(void)
{
	QarSessionJoinInit init = {
		{ QAR_STRUCTURE_TYPE_SESSION_JOIN_INIT, NULL }, // header
		NULL,											// invite_data
		0,												// invite_data_size
		qar_peer_spec_init_default()					// peer_spec_init
	};
	return init;
}

static inline QarSessionInvitePeerInit
qar_session_invite_peer_init_default(void)
{
	QarSessionInvitePeerInit init = {
		{ QAR_STRUCTURE_TYPE_SESSION_INVITE_PEER_INIT, NULL }, // header
		NULL, // connection_string
	};
	return init;
}

static inline QarRenderSenderInit
qar_render_sender_init_default(void)
{
	QarRenderSenderInit init = {
		{ QAR_STRUCTURE_TYPE_RENDERING_STREAM_SENDER_INIT, NULL }, // header
		{ 0 },													   // peer_id
		true,						   // enable_auto_reconnects
		QAR_FRAME_LAYOUT_SIDE_BY_SIDE, // texture_layout
		{},							   // frame_views
		0,							   // frame_views_count
		NULL,						   // app_volume_id
		QAR_PIXEL_FORMAT_B8G8R8A8,	   // color_format
		QAR_PIXEL_FORMAT_D32_FLOAT,	   // depth_format
		QAR_GRAPHICS_API_CPU		   // graphics_api
	};
	return init;
}

static inline QarGuiPanelInit
qar_gui_panel_init_default(void)
{
	QarGuiPanelInit init = {
		{ QAR_STRUCTURE_TYPE_GUI_PANEL_INIT, NULL }, // header
		NULL,										 // display_name
		qar_pose_default(),							 // pose
		qar_gui_panel_size_default(),				 // size
		NULL,										 // visible_to_peers
		0											 // visible_to_peer_count
	};
	return init;
}

static inline QarAppVolumeInit
qar_app_volume_init_default(void)
{
	QarAppVolumeInit init = {
		{ QAR_STRUCTURE_TYPE_APP_VOLUME_INIT, NULL }, // header
		NULL,										  // display_name
		qar_pose_default(),							  // pose
		qar_app_volume_size_default(),				  // size
		NULL,										  // initial_peers
		0											  // initial_peer_count
	};
	return init;
}

static inline QarRenderFrameShow
qar_render_frame_show_default(void)
{
	QarRenderFrameShow init = {
		{ QAR_STRUCTURE_TYPE_RENDERING_END_FRAME, NULL }, // header
		qar_near_far_default()							  // rendered_near_far
	};
	return init;
}

#ifdef QAR_ENABLE_D3D11
static inline QarStreamParamsD3D11
qar_stream_params_d3d11_default(void)
{
	QarStreamParamsD3D11 params = {
		{ QAR_STRUCTURE_TYPE_STREAM_D3D11_PARAMS_EXT, NULL }, // header
		NULL,												  // d3d11_context
		NULL,												  // d3d11_device
		0,	 // color_bind_flags
		0,	 // depth_bind_flags
		true // acquire_keyed_mutex_sync
	};
	return params;
}
#endif

// ============================================================================
// SESSION INVITE HELPER FUNCTIONS
// ============================================================================

static inline QarSessionInvite
qar_session_invite_default(void)
{
	QarSessionInvite invite = {
		qar_session_id_default(), // session_id
		NULL,					  // data
		0						  // data_size
	};
	return invite;
}

static inline void
qar_session_invite_destroy(QarSessionInvite* invite)
{
	if(invite == NULL)
	{
		return;
	}

	// Free the data if it was allocated
	if(invite->data != NULL)
	{
		free(invite->data);
		invite->data = NULL;
	}
	invite->data_size = 0;

	// Free the invite structure itself
	free(invite);
}

#endif // QAR_STREAMING_C_V0_DETAIL_DEFAULT_INITS_H

#ifndef QAR_STREAMING_C_V0_DETAIL_GUI_PANELS_H
#define QAR_STREAMING_C_V0_DETAIL_GUI_PANELS_H

#ifdef QAR_ENABLE_DYNAMIC_LOADING
#endif

// Callback typedefs
typedef void (*qar_gui_panel_update_callback_t)(
	QarGuiPanel* handle, void* user_state
);

// Function registry enum for GUI panels functions
typedef enum QarGuiPanelsImplFuncIndex
{
	QAR_IMPL_FUNC_GUI_PANELS_ADD_PANEL = 0,
	QAR_IMPL_FUNC_GUI_PANELS_UPDATE_POSE,
	QAR_IMPL_FUNC_GUI_PANELS_CHANGE_SIZE,
	QAR_IMPL_FUNC_GUI_PANELS_SET_STATE,
	QAR_IMPL_FUNC_GUI_PANELS_CLOSE_PANEL,
	QAR_IMPL_FUNC_GUI_PANELS_NAVIGATE_TO_URI,
	QAR_IMPL_FUNC_GUI_PANELS_UPDATE_VISIBLE_TO,
	QAR_IMPL_FUNC_GUI_PANELS_SUBSCRIBE_UPDATES,
	QAR_IMPL_FUNC_GUI_PANELS_SUBSCRIBE_PANEL_UPDATES,
	QAR_IMPL_FUNC_GUI_PANEL_HANDLE_IS_VALID,
	QAR_IMPL_FUNC_GUI_PANEL_HANDLE_DESTROY,
	QAR_IMPL_FUNC_GUI_PANEL_GET_ID,
	QAR_IMPL_FUNC_GUI_PANEL_GET_DISPLAY_NAME,
	QAR_IMPL_FUNC_GUI_PANEL_GET_POSE,
	QAR_IMPL_FUNC_GUI_PANEL_GET_SIZE,
	QAR_IMPL_FUNC_GUI_PANEL_GET_CONTENT_URI,
	QAR_IMPL_FUNC_GUI_PANEL_GET_STATE,
	QAR_IMPL_FUNC_GUI_PANEL_GET_VISIBLE_TO_PEERS_COUNT,
	QAR_IMPL_FUNC_GUI_PANEL_GET_VISIBLE_TO_PEERS,
	QAR_IMPL_FUNC_QUERY_GUI_PANELS_COUNT,
	QAR_IMPL_FUNC_QUERY_GUI_PANELS,
	QAR_IMPL_FUNC_GUI_PANELS_COUNT
} QarGuiPanelsImplFuncIndex;

// Function names macro for symbol loading (preserves modularity)
#define QAR_GUI_PANELS_IMPL_FUNCTION_NAMES                                     \
	"qar_impl_gui_panels_add_panel", "qar_impl_gui_panels_update_pose",        \
		"qar_impl_gui_panels_change_size", "qar_impl_gui_panels_set_state",    \
		"qar_impl_gui_panels_close_panel",                                     \
		"qar_impl_gui_panels_navigate_to_uri",                                 \
		"qar_impl_gui_panels_update_visible_to",                               \
		"qar_impl_gui_panels_subscribe_updates",                               \
		"qar_impl_gui_panels_subscribe_panel_updates",                         \
		"qar_impl_gui_panel_handle_is_valid",                                  \
		"qar_impl_gui_panel_handle_destroy", "qar_impl_gui_panel_get_id",      \
		"qar_impl_gui_panel_get_display_name", "qar_impl_gui_panel_get_pose",  \
		"qar_impl_gui_panel_get_size", "qar_impl_gui_panel_get_content_uri",   \
		"qar_impl_gui_panel_get_state",                                        \
		"qar_impl_gui_panel_get_visible_to_peers_count",                       \
		"qar_impl_gui_panel_get_visible_to_peers",                             \
		"qar_impl_query_gui_panels_count", "qar_impl_query_gui_panels"

#ifdef QAR_ENABLE_DYNAMIC_LOADING

// Function typedefs for GUI panel management
typedef QarResult (*qar_gui_panels_add_panel_func_t)(
	QarSession* session,
	const QarGuiPanelInit* init,
	QarGuiPanelId* out_panel_id
);
typedef QarResult (*qar_gui_panels_update_pose_func_t)(
	QarSession* session, const QarGuiPanelId* id, const QarPose* pose
);
typedef QarResult (*qar_gui_panels_change_size_func_t)(
	QarSession* session, const QarGuiPanelId* id, const QarGuiPanelSize* size
);
typedef QarResult (*qar_gui_panels_set_state_func_t)(
	QarSession* session, const QarGuiPanelId* id, QarGuiPanelState state
);
typedef QarResult (*qar_gui_panels_close_panel_func_t)(
	QarSession* session, const QarGuiPanelId* id
);
typedef QarResult (*qar_gui_panels_navigate_to_uri_func_t)(
	QarSession* session, const QarGuiPanelId* id, const char* uri
);
typedef QarResult (*qar_gui_panels_update_visible_to_func_t)(
	QarSession* session,
	const QarGuiPanelId* id,
	const QarPeerId** peer_ids_additions,
	size_t additions_count,
	const QarPeerId** peer_ids_removals,
	size_t removals_count
);
typedef QarResult (*qar_gui_panels_subscribe_updates_func_t)(
	QarSession* session,
	qar_gui_panel_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
typedef QarResult (*qar_gui_panels_subscribe_panel_updates_func_t)(
	QarSession* session,
	const QarGuiPanelId* id,
	qar_gui_panel_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);

// GUI panel handle function typedefs
typedef bool (*qar_gui_panel_handle_is_valid_func_t)(QarGuiPanel* handle);
typedef void (*qar_gui_panel_handle_destroy_func_t)(QarGuiPanel* handle);
typedef QarResult (*qar_gui_panel_get_id_func_t)(
	QarGuiPanel* handle, QarGuiPanelId* out_id
);
typedef QarResult (*qar_gui_panel_get_display_name_func_t)(
	QarGuiPanel* handle, char* out_buffer, size_t buffer_size
);
typedef QarResult (*qar_gui_panel_get_pose_func_t)(
	QarGuiPanel* handle, QarPose* out_pose
);
typedef QarResult (*qar_gui_panel_get_size_func_t)(
	QarGuiPanel* handle, QarGuiPanelSize* out_size
);
typedef QarResult (*qar_gui_panel_get_content_uri_func_t)(
	QarGuiPanel* handle, char* out_uri, size_t buffer_size
);
typedef QarResult (*qar_gui_panel_get_state_func_t)(
	QarGuiPanel* handle, QarGuiPanelState* out_state
);
typedef QarResult (*qar_gui_panel_get_visible_to_peers_count_func_t)(
	QarGuiPanel* handle, size_t* out_count
);
typedef QarResult (*qar_gui_panel_get_visible_to_peers_func_t)(
	QarGuiPanel* handle,
	QarPeerId* out_peers,
	size_t peers_buffer_size,
	size_t* out_peers_written
);
typedef QarResult (*qar_query_gui_panels_count_func_t)(
	QarSession* session, size_t* out_count
);
typedef QarResult (*qar_query_gui_panels_func_t)(
	QarSession* session,
	QarGuiPanel** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
);

#else

// Static implementation function declarations
QAR_C_API QarResult qar_impl_gui_panels_add_panel(
	QarSession* session,
	const QarGuiPanelInit* init,
	QarGuiPanelId* out_panel_id
);
QAR_C_API QarResult qar_impl_gui_panels_update_pose(
	QarSession* session, const QarGuiPanelId* id, const QarPose* pose
);
QAR_C_API QarResult qar_impl_gui_panels_change_size(
	QarSession* session, const QarGuiPanelId* id, const QarGuiPanelSize* size
);
QAR_C_API QarResult qar_impl_gui_panels_set_state(
	QarSession* session, const QarGuiPanelId* id, QarGuiPanelState state
);
QAR_C_API QarResult
qar_impl_gui_panels_close_panel(QarSession* session, const QarGuiPanelId* id);
QAR_C_API QarResult qar_impl_gui_panels_navigate_to_uri(
	QarSession* session, const QarGuiPanelId* id, const char* uri
);
QAR_C_API QarResult qar_impl_gui_panels_update_visible_to(
	QarSession* session,
	const QarGuiPanelId* id,
	const QarPeerId** peer_ids_additions,
	size_t additions_count,
	const QarPeerId** peer_ids_removals,
	size_t removals_count
);
QAR_C_API QarResult qar_impl_gui_panels_subscribe_updates(
	QarSession* session,
	qar_gui_panel_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
QAR_C_API QarResult qar_impl_gui_panels_subscribe_panel_updates(
	QarSession* session,
	const QarGuiPanelId* id,
	qar_gui_panel_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
QAR_C_API bool qar_impl_gui_panel_handle_is_valid(QarGuiPanel* handle);
QAR_C_API void qar_impl_gui_panel_handle_destroy(QarGuiPanel* handle);
QAR_C_API QarResult
qar_impl_gui_panel_get_id(QarGuiPanel* handle, QarGuiPanelId* out_id);
QAR_C_API QarResult qar_impl_gui_panel_get_display_name(
	QarGuiPanel* handle, char* out_buffer, size_t buffer_size
);
QAR_C_API QarResult
qar_impl_gui_panel_get_pose(QarGuiPanel* handle, QarPose* out_pose);
QAR_C_API QarResult
qar_impl_gui_panel_get_size(QarGuiPanel* handle, QarGuiPanelSize* out_size);
QAR_C_API QarResult qar_impl_gui_panel_get_content_uri(
	QarGuiPanel* handle, char* out_uri, size_t buffer_size
);
QAR_C_API QarResult
qar_impl_gui_panel_get_state(QarGuiPanel* handle, QarGuiPanelState* out_state);
QAR_C_API QarResult qar_impl_gui_panel_get_visible_to_peers_count(
	QarGuiPanel* handle, size_t* out_count
);
QAR_C_API QarResult qar_impl_gui_panel_get_visible_to_peers(
	QarGuiPanel* handle,
	QarPeerId* out_peers,
	size_t peers_buffer_size,
	size_t* out_peers_written
);
QAR_C_API QarResult
qar_impl_query_gui_panels_count(QarSession* session, size_t* out_count);
QAR_C_API QarResult qar_impl_query_gui_panels(
	QarSession* session,
	QarGuiPanel** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
);
#endif
// ============================================================================
// GUI PANEL MANAGEMENT DISPATCH FUNCTIONS
// ============================================================================

static inline QarResult
qar_gui_panels_add_panel(
	QarSession* session,
	const QarGuiPanelInit* init,
	QarGuiPanelId* out_panel_id
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panels_add_panel,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANELS_ADD_PANEL,
		session,
		init,
		out_panel_id
	);
#else
	return qar_impl_gui_panels_add_panel(session, init, out_panel_id);
#endif
}

static inline QarResult
qar_gui_panels_update_pose(
	QarSession* session, const QarGuiPanelId* id, const QarPose* pose
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panels_update_pose,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANELS_UPDATE_POSE,
		session,
		id,
		pose
	);
#else
	return qar_impl_gui_panels_update_pose(session, id, pose);
#endif
}

static inline QarResult
qar_gui_panels_change_size(
	QarSession* session, const QarGuiPanelId* id, const QarGuiPanelSize* size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panels_change_size,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANELS_CHANGE_SIZE,
		session,
		id,
		size
	);
#else
	return qar_impl_gui_panels_change_size(session, id, size);
#endif
}
static inline QarResult
qar_gui_panels_set_state(
	QarSession* session, const QarGuiPanelId* id, QarGuiPanelState state
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panels_set_state,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANELS_SET_STATE,
		session,
		id,
		state
	);
#else
	return qar_impl_gui_panels_set_state(session, id, state);
#endif
}

static inline QarResult
qar_gui_panels_close_panel(QarSession* session, const QarGuiPanelId* id)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panels_close_panel,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANELS_CLOSE_PANEL,
		session,
		id
	);
#else
	return qar_impl_gui_panels_close_panel(session, id);
#endif
}

static inline QarResult
qar_gui_panels_navigate_to_uri(
	QarSession* session, const QarGuiPanelId* id, const char* uri
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panels_navigate_to_uri,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANELS_NAVIGATE_TO_URI,
		session,
		id,
		uri
	);
#else
	return qar_impl_gui_panels_navigate_to_uri(session, id, uri);
#endif
}

static inline QarResult
qar_gui_panels_update_visible_to(
	QarSession* session,
	const QarGuiPanelId* id,
	const QarPeerId** peer_ids_additions,
	size_t additions_count,
	const QarPeerId** peer_ids_removals,
	size_t removals_count
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panels_update_visible_to,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANELS_UPDATE_VISIBLE_TO,
		session,
		id,
		peer_ids_additions,
		additions_count,
		peer_ids_removals,
		removals_count
	);
#else
	return qar_impl_gui_panels_update_visible_to(
		session,
		id,
		peer_ids_additions,
		additions_count,
		peer_ids_removals,
		removals_count
	);
#endif
}

static inline QarResult
qar_gui_panels_subscribe_updates(
	QarSession* session,
	qar_gui_panel_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panels_subscribe_updates,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANELS_SUBSCRIBE_UPDATES,
		session,
		callback,
		user_state,
		token
	);
#else
	return qar_impl_gui_panels_subscribe_updates(
		session, callback, user_state, token
	);
#endif
}

static inline QarResult
qar_gui_panels_subscribe_panel_updates(
	QarSession* session,
	const QarGuiPanelId* id,
	qar_gui_panel_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panels_subscribe_panel_updates,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANELS_SUBSCRIBE_PANEL_UPDATES,
		session,
		id,
		callback,
		user_state,
		token
	);
#else
	return qar_impl_gui_panels_subscribe_panel_updates(
		session, id, callback, user_state, token
	);
#endif
}

// GUI Panel Handle Management - Dispatch Functions
static inline bool
qar_gui_panel_handle_is_valid(QarGuiPanel* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_handle_is_valid,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_HANDLE_IS_VALID,
		handle
	);
#else
	return qar_impl_gui_panel_handle_is_valid(handle);
#endif
}

static inline void
qar_gui_panel_handle_destroy(QarGuiPanel* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		gui_panel_handle_destroy,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_HANDLE_DESTROY,
		handle
	);
#else
	qar_impl_gui_panel_handle_destroy(handle);
#endif
}

// GUI Panel Property Getters - Dispatch Functions
static inline QarResult
qar_gui_panel_get_id(QarGuiPanel* handle, QarGuiPanelId* out_id)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_get_id,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_GET_ID,
		handle,
		out_id
	);
#else
	return qar_impl_gui_panel_get_id(handle, out_id);
#endif
}

static inline QarResult
qar_gui_panel_get_display_name(
	QarGuiPanel* handle, char* out_buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_get_display_name,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_GET_DISPLAY_NAME,
		handle,
		out_buffer,
		buffer_size
	);
#else
	return qar_impl_gui_panel_get_display_name(handle, out_buffer, buffer_size);
#endif
}

static inline QarResult
qar_gui_panel_get_pose(QarGuiPanel* handle, QarPose* out_pose)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_get_pose,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_GET_POSE,
		handle,
		out_pose
	);
#else
	return qar_impl_gui_panel_get_pose(handle, out_pose);
#endif
}

static inline QarResult
qar_gui_panel_get_size(QarGuiPanel* handle, QarGuiPanelSize* out_size)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_get_size,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_GET_SIZE,
		handle,
		out_size
	);
#else
	return qar_impl_gui_panel_get_size(handle, out_size);
#endif
}

static inline QarResult
qar_gui_panel_get_content_uri(
	QarGuiPanel* handle, char* out_uri, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_get_content_uri,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_GET_CONTENT_URI,
		handle,
		out_uri,
		buffer_size
	);
#else
	return qar_impl_gui_panel_get_content_uri(handle, out_uri, buffer_size);
#endif
}

static inline QarResult
qar_gui_panel_get_state(QarGuiPanel* handle, QarGuiPanelState* out_state)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_get_state,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_GET_STATE,
		handle,
		out_state
	);
#else
	return qar_impl_gui_panel_get_state(handle, out_state);
#endif
}

static inline QarResult
qar_gui_panel_get_visible_to_peers_count(QarGuiPanel* handle, size_t* out_count)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_get_visible_to_peers_count,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_GET_VISIBLE_TO_PEERS_COUNT,
		handle,
		out_count
	);
#else
	return qar_impl_gui_panel_get_visible_to_peers_count(handle, out_count);
#endif
}

static inline QarResult
qar_gui_panel_get_visible_to_peers(
	QarGuiPanel* handle,
	QarPeerId* out_peers,
	size_t peers_buffer_size,
	size_t* out_peers_written
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		gui_panel_get_visible_to_peers,
		gui_panels,
		QAR_IMPL_FUNC_GUI_PANEL_GET_VISIBLE_TO_PEERS,
		handle,
		out_peers,
		peers_buffer_size,
		out_peers_written
	);
#else
	return qar_impl_gui_panel_get_visible_to_peers(
		handle, out_peers, peers_buffer_size, out_peers_written
	);
#endif
}

// GUI Panel Query Functions - Dispatch Functions
static inline QarResult
qar_query_gui_panels_count(QarSession* session, size_t* out_count)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		query_gui_panels_count,
		gui_panels,
		QAR_IMPL_FUNC_QUERY_GUI_PANELS_COUNT,
		session,
		out_count
	);
#else
	return qar_impl_query_gui_panels_count(session, out_count);
#endif
}

static inline QarResult
qar_query_gui_panels(
	QarSession* session,
	QarGuiPanel** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		query_gui_panels,
		gui_panels,
		QAR_IMPL_FUNC_QUERY_GUI_PANELS,
		session,
		out_handles,
		handles_buffer_size,
		out_handles_written
	);
#else
	return qar_impl_query_gui_panels(
		session, out_handles, handles_buffer_size, out_handles_written
	);
#endif
}

#endif // QAR_STREAMING_C_V0_DETAIL_GUI_PANELS_H

#ifndef QAR_STREAMING_C_V0_DETAIL_PEER_MANAGEMENT_H
#define QAR_STREAMING_C_V0_DETAIL_PEER_MANAGEMENT_H

#ifdef QAR_ENABLE_DYNAMIC_LOADING
#endif

// Function registry enum for peer management functions
typedef enum QarPeerManagementImplFuncIndex
{
	QAR_IMPL_FUNC_PEER_SPEC_HANDLE_IS_VALID = 0,
	QAR_IMPL_FUNC_PEER_SPEC_HANDLE_DESTROY,
	QAR_IMPL_FUNC_PEER_SPEC_GET_ID,
	QAR_IMPL_FUNC_PEER_SPEC_GET_DISPLAY_NAME,
	QAR_IMPL_FUNC_PEER_SPEC_GET_APP_VERSION,
	QAR_IMPL_FUNC_PEER_SPEC_GET_APP_CUSTOM_PEER_INFO,
	QAR_IMPL_FUNC_PEER_SPEC_GET_APP_STATE,
	QAR_IMPL_FUNC_PEER_SPEC_GET_VERSION_ID,
	QAR_IMPL_FUNC_PEER_SPEC_GET_ROOM_TAG,
	QAR_IMPL_FUNC_SESSION_GET_MY_SPEC,
	QAR_IMPL_FUNC_QUERY_PEER_SPECS_COUNT,
	QAR_IMPL_FUNC_QUERY_PEER_SPECS,
	QAR_IMPL_FUNC_PEER_UPDATE_DISPLAY_NAME,
	QAR_IMPL_FUNC_PEER_SUBSCRIBE_UPDATES,
	QAR_IMPL_FUNC_PEER_MANAGEMENT_COUNT
} QarPeerManagementImplFuncIndex;

// Function names macro for symbol loading (preserves modularity)
#define QAR_PEER_MANAGEMENT_IMPL_FUNCTION_NAMES                                \
	"qar_impl_peer_spec_handle_is_valid", "qar_impl_peer_spec_handle_destroy", \
		"qar_impl_peer_spec_get_id", "qar_impl_peer_spec_get_display_name",    \
		"qar_impl_peer_spec_get_app_version",                                  \
		"qar_impl_peer_spec_get_app_custom_peer_info",                         \
		"qar_impl_peer_spec_get_app_state",                                    \
		"qar_impl_peer_spec_get_version_id",                                   \
		"qar_impl_peer_spec_get_room_tag", "qar_impl_session_get_my_spec",     \
		"qar_impl_query_peer_specs_count", "qar_impl_query_peer_specs",        \
		"qar_impl_peer_update_display_name", "qar_impl_peer_subscribe_updates"

typedef void (*qar_peer_update_callback_t)(
	QarPeerSpec* handle, void* user_state
);

#ifdef QAR_ENABLE_DYNAMIC_LOADING
// Function typedefs for peer management
typedef bool (*qar_peer_spec_handle_is_valid_func_t)(QarPeerSpec* handle);
typedef void (*qar_peer_spec_handle_destroy_func_t)(QarPeerSpec* handle);
typedef QarResult (*qar_peer_spec_get_id_func_t)(
	QarPeerSpec* handle, QarPeerId* out_id
);
typedef QarResult (*qar_peer_spec_get_display_name_func_t)(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
typedef QarResult (*qar_peer_spec_get_app_version_func_t)(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
typedef QarResult (*qar_peer_spec_get_app_custom_peer_info_func_t)(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
typedef QarResult (*qar_peer_spec_get_app_state_func_t)(
	QarPeerSpec* handle, QarAppState* out_state
);
typedef QarResult (*qar_peer_spec_get_version_id_func_t)(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
typedef QarResult (*qar_peer_spec_get_room_tag_func_t)(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
typedef QarResult (*qar_session_get_my_spec_func_t)(
	const QarSession* session, QarPeerSpec** out_handle
);
typedef QarResult (*qar_query_peer_specs_count_func_t)(
	QarSession* session, size_t* out_count
);
typedef QarResult (*qar_query_peer_specs_func_t)(
	QarSession* session,
	QarPeerSpec** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
);
typedef QarResult (*qar_peer_update_display_name_func_t)(
	QarSession* session, const char* name
);

typedef QarResult (*qar_peer_subscribe_updates_func_t)(
	QarSession* session,
	qar_peer_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
#else

// Static implementation function declarations
QAR_C_API bool qar_impl_peer_spec_handle_is_valid(QarPeerSpec* handle);
QAR_C_API void qar_impl_peer_spec_handle_destroy(QarPeerSpec* handle);
QAR_C_API QarResult
qar_impl_peer_spec_get_id(QarPeerSpec* handle, QarPeerId* out_id);
QAR_C_API QarResult qar_impl_peer_spec_get_display_name(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
QAR_C_API QarResult qar_impl_peer_spec_get_app_version(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
QAR_C_API QarResult qar_impl_peer_spec_get_app_custom_peer_info(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
QAR_C_API QarResult
qar_impl_peer_spec_get_app_state(QarPeerSpec* handle, QarAppState* out_state);
QAR_C_API QarResult qar_impl_peer_spec_get_version_id(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
QAR_C_API QarResult qar_impl_peer_spec_get_room_tag(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
);
QAR_C_API QarResult qar_impl_session_get_my_spec(
	const QarSession* session, QarPeerSpec** out_handle
);
QAR_C_API QarResult
qar_impl_query_peer_specs_count(QarSession* session, size_t* out_count);
QAR_C_API QarResult qar_impl_query_peer_specs(
	QarSession* session,
	QarPeerSpec** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
);
QAR_C_API QarResult
qar_impl_peer_update_display_name(QarSession* session, const char* name);
QAR_C_API QarResult qar_impl_peer_subscribe_updates(
	QarSession* session,
	qar_peer_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
#endif

// ============================================================================
// PEER MANAGEMENT DISPATCH FUNCTIONS
// ============================================================================

static inline bool
qar_peer_spec_handle_is_valid(QarPeerSpec* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_spec_handle_is_valid,
		peer_management,
		QAR_IMPL_FUNC_PEER_SPEC_HANDLE_IS_VALID,
		handle
	);
#else
	return qar_impl_peer_spec_handle_is_valid(handle);
#endif
}

static inline void
qar_peer_spec_handle_destroy(QarPeerSpec* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		peer_spec_handle_destroy,
		peer_management,
		QAR_IMPL_FUNC_PEER_SPEC_HANDLE_DESTROY,
		handle
	);
#else
	qar_impl_peer_spec_handle_destroy(handle);
#endif
}

static inline QarResult
qar_peer_spec_get_id(QarPeerSpec* handle, QarPeerId* out_id)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_spec_get_id,
		peer_management,
		QAR_IMPL_FUNC_PEER_SPEC_GET_ID,
		handle,
		out_id
	);
#else
	return qar_impl_peer_spec_get_id(handle, out_id);
#endif
}

static inline QarResult
qar_peer_spec_get_display_name(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_spec_get_display_name,
		peer_management,
		QAR_IMPL_FUNC_PEER_SPEC_GET_DISPLAY_NAME,
		handle,
		out_buffer,
		buffer_size
	);
#else
	return qar_impl_peer_spec_get_display_name(handle, out_buffer, buffer_size);
#endif
}

static inline QarResult
qar_peer_spec_get_app_version(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_spec_get_app_version,
		peer_management,
		QAR_IMPL_FUNC_PEER_SPEC_GET_APP_VERSION,
		handle,
		out_buffer,
		buffer_size
	);
#else
	return qar_impl_peer_spec_get_app_version(handle, out_buffer, buffer_size);
#endif
}

static inline QarResult
qar_peer_spec_get_app_custom_peer_info(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_spec_get_app_custom_peer_info,
		peer_management,
		QAR_IMPL_FUNC_PEER_SPEC_GET_APP_CUSTOM_PEER_INFO,
		handle,
		out_buffer,
		buffer_size
	);
#else
	return qar_impl_peer_spec_get_app_custom_peer_info(
		handle, out_buffer, buffer_size
	);
#endif
}

static inline QarResult
qar_peer_spec_get_app_state(QarPeerSpec* handle, QarAppState* out_state)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_spec_get_app_state,
		peer_management,
		QAR_IMPL_FUNC_PEER_SPEC_GET_APP_STATE,
		handle,
		out_state
	);
#else
	return qar_impl_peer_spec_get_app_state(handle, out_state);
#endif
}

static inline QarResult
qar_peer_spec_get_version_id(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_spec_get_version_id,
		peer_management,
		QAR_IMPL_FUNC_PEER_SPEC_GET_VERSION_ID,
		handle,
		out_buffer,
		buffer_size
	);
#else
	return qar_impl_peer_spec_get_version_id(handle, out_buffer, buffer_size);
#endif
}

static inline QarResult
qar_peer_spec_get_room_tag(
	QarPeerSpec* handle, char* out_buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_spec_get_room_tag,
		peer_management,
		QAR_IMPL_FUNC_PEER_SPEC_GET_ROOM_TAG,
		handle,
		out_buffer,
		buffer_size
	);
#else
	return qar_impl_peer_spec_get_room_tag(handle, out_buffer, buffer_size);
#endif
}

static inline QarResult
qar_session_get_my_spec(const QarSession* session, QarPeerSpec** out_handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_get_my_spec,
		peer_management,
		QAR_IMPL_FUNC_SESSION_GET_MY_SPEC,
		session,
		out_handle
	);
#else
	return qar_impl_session_get_my_spec(session, out_handle);
#endif
}

static inline QarResult
qar_query_peer_specs_count(QarSession* session, size_t* out_count)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		query_peer_specs_count,
		peer_management,
		QAR_IMPL_FUNC_QUERY_PEER_SPECS_COUNT,
		session,
		out_count
	);
#else
	return qar_impl_query_peer_specs_count(session, out_count);
#endif
}

static inline QarResult
qar_query_peer_specs(
	QarSession* session,
	QarPeerSpec** out_handles,
	size_t handles_buffer_size,
	size_t* out_handles_written
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		query_peer_specs,
		peer_management,
		QAR_IMPL_FUNC_QUERY_PEER_SPECS,
		session,
		out_handles,
		handles_buffer_size,
		out_handles_written
	);
#else
	return qar_impl_query_peer_specs(
		session, out_handles, handles_buffer_size, out_handles_written
	);
#endif
}

static inline QarResult
qar_peer_update_display_name(QarSession* session, const char* name)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_update_display_name,
		peer_management,
		QAR_IMPL_FUNC_PEER_UPDATE_DISPLAY_NAME,
		session,
		name
	);
#else
	return qar_impl_peer_update_display_name(session, name);
#endif
}

static inline QarResult
qar_peer_subscribe_updates(
	QarSession* session,
	qar_peer_update_callback_t callback,
	void* user_state,
	QarCancelToken* token
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		peer_subscribe_updates,
		peer_management,
		QAR_IMPL_FUNC_PEER_SUBSCRIBE_UPDATES,
		session,
		callback,
		user_state,
		token
	);
#else
	return qar_impl_peer_subscribe_updates(
		session, callback, user_state, token
	);
#endif
}

#endif // QAR_STREAMING_C_V0_DETAIL_PEER_MANAGEMENT_H
#ifndef QAR_STREAMING_C_V0_DETAIL_RENDER_STREAM_H
#define QAR_STREAMING_C_V0_DETAIL_RENDER_STREAM_H

#ifdef QAR_ENABLE_DYNAMIC_LOADING
#endif

// Callback typedefs
typedef void (*qar_render_sender_create_callback_t)(
	QarResult status, QarRenderSender* out_stream, void* user_state
);

typedef void (*qar_render_sender_change_layout_callback_t)(
	QarResult status, void* user_state
);

typedef void (*qar_render_sender_begin_frame_callback_t)(
	QarResult status, QarRenderFrameInfo* frame_info, void* user_state
);

// Function registry enum for render stream sender functions
typedef enum QarRenderStreamSenderImplFuncIndex
{
	QAR_IMPL_FUNC_RENDER_STREAM_HANDLE_DESTROY = 0,
	QAR_IMPL_FUNC_RENDER_SENDER_LAYOUT,
	QAR_IMPL_FUNC_RENDER_SENDER_FRAME_D3D11,
	QAR_IMPL_FUNC_RENDER_SENDER_LAST_HANDS,
	QAR_IMPL_FUNC_RENDER_SENDER_SHOW_FRAME,
	QAR_IMPL_FUNC_RENDER_SENDER_CREATE_ASYNC,
	QAR_IMPL_FUNC_RENDER_SENDER_CHANGE_LAYOUT,
	QAR_IMPL_FUNC_RENDER_SENDER_CHANGE_LAYOUT_ASYNC,
	QAR_IMPL_FUNC_RENDER_SENDER_BEGIN_FRAME_ASYNC,
	QAR_IMPL_FUNC_RENDER_SENDER_CREATE,
	QAR_IMPL_FUNC_RENDER_SENDER_FRAME_CPU,
	QAR_IMPL_FUNC_RENDER_SENDER_BEGIN_FRAME,
	QAR_IMPL_FUNC_RENDER_FRAME_INFO_HANDLE_DESTROY,
	QAR_IMPL_FUNC_RENDER_FRAME_INFO_GET_VIEW_POSE,
	QAR_IMPL_FUNC_RENDER_FRAME_INFO_GET_VIEW_FOV,
	QAR_IMPL_FUNC_RENDER_STREAM_SENDER_COUNT
} QarRenderStreamSenderImplFuncIndex;

// Function names macro for symbol loading (preserves modularity)
#define QAR_RENDER_STREAM_SENDER_IMPL_FUNCTION_NAMES                           \
	"qar_impl_render_stream_handle_destroy", "qar_impl_render_sender_layout",  \
		"qar_impl_render_sender_frame_d3d11",                                  \
		"qar_impl_render_sender_last_hands",                                   \
		"qar_impl_render_sender_show_frame",                                   \
		"qar_impl_render_sender_create_async",                                 \
		"qar_impl_render_sender_change_layout",                                \
		"qar_impl_render_sender_change_layout_async",                          \
		"qar_impl_render_sender_begin_frame_async",                            \
		"qar_impl_render_sender_create", "qar_impl_render_sender_frame_cpu",   \
		"qar_impl_render_sender_begin_frame",                                  \
		"qar_impl_render_frame_info_handle_destroy",                           \
		"qar_impl_render_frame_info_get_view_pose",                            \
		"qar_impl_render_frame_info_get_view_fov"

#ifdef QAR_ENABLE_DYNAMIC_LOADING
// Function typedefs for render stream management
typedef void (*qar_render_stream_handle_destroy_func_t)(
	QarRenderSender* handle
);
typedef QarResult (*qar_render_sender_layout_func_t)(
	QarRenderSender* stream, QarVideoFrameLayout* out_layout
);
typedef QarResult (*qar_render_sender_frame_d3d11_func_t)(
	QarRenderSender* stream, QarVideoFrameD3D11* out_frame
);
typedef QarResult (*qar_render_sender_last_hands_func_t)(
	QarRenderSender* stream, QarDeviceHandsWithJoints* out_hands
);
typedef QarResult (*qar_render_sender_show_frame_func_t)(
	QarRenderSender* stream, const QarRenderFrameShow* frame_show
);
typedef QarResult (*qar_render_sender_create_async_func_t)(
	QarSession* session,
	QarRenderSenderInit* init,
	qar_render_sender_create_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
typedef QarResult (*qar_render_sender_change_layout_func_t)(
	QarRenderSender* stream,
	const QarVideoFrameLayout* layout,
	QarCancelToken* token
);
typedef QarResult (*qar_render_sender_change_layout_async_func_t)(
	QarRenderSender* stream,
	const QarVideoFrameLayout* layout,
	qar_render_sender_change_layout_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
typedef QarResult (*qar_render_sender_begin_frame_async_func_t)(
	QarRenderSender* stream,
	qar_render_sender_begin_frame_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
typedef QarResult (*qar_render_sender_create_func_t)(
	QarSession* session,
	QarRenderSenderInit* init,
	QarCancelToken* cancel,
	QarRenderSender** out_stream
);
typedef QarResult (*qar_render_sender_frame_cpu_func_t)(
	QarRenderSender* stream, QarVideoFrameCpu* out_frame
);
typedef QarResult (*qar_render_sender_begin_frame_func_t)(
	QarRenderSender* stream,
	QarCancelToken* token,
	QarRenderFrameInfo** out_frame_info
);

// Frame info handle functions
typedef void (*qar_render_frame_info_handle_destroy_func_t)(
	QarRenderFrameInfo* handle
);
typedef QarResult (*qar_render_frame_info_get_view_pose_func_t)(
	QarRenderFrameInfo* handle, size_t view_index, QarPose* out_pose
);
typedef QarResult (*qar_render_frame_info_get_view_fov_func_t)(
	QarRenderFrameInfo* handle, size_t view_index, QarFov* out_fov
);

#else
// Static implementation function declarations
QAR_C_API void qar_impl_render_stream_handle_destroy(QarRenderSender* handle);
QAR_C_API QarResult qar_impl_render_sender_layout(
	QarRenderSender* stream, QarVideoFrameLayout* out_layout
);
QAR_C_API QarResult qar_impl_render_sender_frame_d3d11(
	QarRenderSender* stream, QarVideoFrameD3D11* out_frame
);
QAR_C_API QarResult qar_impl_render_sender_last_hands(
	QarRenderSender* stream, QarDeviceHandsWithJoints* out_hands
);
QAR_C_API QarResult qar_impl_render_sender_show_frame(
	QarRenderSender* stream, const QarRenderFrameShow* frame_show
);
QAR_C_API QarResult qar_impl_render_sender_create_async(
	QarSession* session,
	QarRenderSenderInit* init,
	qar_render_sender_create_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
QAR_C_API QarResult qar_impl_render_sender_change_layout(
	QarRenderSender* stream,
	const QarVideoFrameLayout* layout,
	QarCancelToken* token
);
QAR_C_API QarResult qar_impl_render_sender_change_layout_async(
	QarRenderSender* stream,
	const QarVideoFrameLayout* layout,
	qar_render_sender_change_layout_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
QAR_C_API QarResult qar_impl_render_sender_begin_frame_async(
	QarRenderSender* stream,
	qar_render_sender_begin_frame_callback_t callback,
	void* user_state,
	QarCancelToken* token
);
QAR_C_API QarResult qar_impl_render_sender_create(
	QarSession* session,
	QarRenderSenderInit* init,
	QarCancelToken* cancel,
	QarRenderSender** out_stream
);
QAR_C_API QarResult qar_impl_render_sender_frame_cpu(
	QarRenderSender* stream, QarVideoFrameCpu* out_frame
);
QAR_C_API QarResult qar_impl_render_sender_begin_frame(
	QarRenderSender* stream,
	QarCancelToken* token,
	QarRenderFrameInfo** out_frame_info
);

// Frame info handle functions (static)
QAR_C_API void
qar_impl_render_frame_info_handle_destroy(QarRenderFrameInfo* handle);
QAR_C_API QarResult qar_impl_render_frame_info_get_view_pose(
	QarRenderFrameInfo* handle, size_t view_index, QarPose* out_pose
);
QAR_C_API QarResult qar_impl_render_frame_info_get_view_fov(
	QarRenderFrameInfo* handle, size_t view_index, QarFov* out_fov
);
#endif
// ============================================================================
// RENDERING STREAM SENDER DISPATCH FUNCTIONS
// ============================================================================

static inline void
qar_render_stream_handle_destroy(QarRenderSender* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		render_stream_handle_destroy,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_STREAM_HANDLE_DESTROY,
		handle
	);
#else
	qar_impl_render_stream_handle_destroy(handle);
#endif
}

static inline QarResult
qar_render_sender_layout(
	QarRenderSender* stream, QarVideoFrameLayout* out_layout
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_layout,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_LAYOUT,
		stream,
		out_layout
	);
#else
	return qar_impl_render_sender_layout(stream, out_layout);
#endif
}

static inline QarResult
qar_render_sender_change_layout(
	QarRenderSender* stream,
	const QarVideoFrameLayout* layout,
	QarCancelToken* token
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_change_layout,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_CHANGE_LAYOUT,
		stream,
		layout,
		token
	);
#else
	return qar_impl_render_sender_change_layout(stream, layout, token);
#endif
}

static inline QarResult
qar_render_sender_frame_d3d11(
	QarRenderSender* stream, QarVideoFrameD3D11* out_frame
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_frame_d3d11,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_FRAME_D3D11,
		stream,
		out_frame
	);
#else
	return qar_impl_render_sender_frame_d3d11(stream, out_frame);
#endif
}

static inline QarResult
qar_render_sender_last_hands(
	QarRenderSender* stream, QarDeviceHandsWithJoints* out_hands
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_last_hands,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_LAST_HANDS,
		stream,
		out_hands
	);
#else
	return qar_impl_render_sender_last_hands(stream, out_hands);
#endif
}

static inline QarResult
qar_render_sender_show_frame(
	QarRenderSender* stream, const QarRenderFrameShow* frame_show
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_show_frame,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_SHOW_FRAME,
		stream,
		frame_show
	);
#else
	return qar_impl_render_sender_show_frame(stream, frame_show);
#endif
}

static inline QarResult
qar_render_sender_create_async(
	QarSession* session,
	QarRenderSenderInit* init,
	qar_render_sender_create_callback_t callback,
	void* user_state,
	QarCancelToken* token
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_create_async,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_CREATE_ASYNC,
		session,
		init,
		callback,
		user_state,
		token
	);
#else
	return qar_impl_render_sender_create_async(
		session, init, callback, user_state, token
	);
#endif
}

static inline QarResult
qar_render_sender_begin_frame_async(
	QarRenderSender* stream,
	qar_render_sender_begin_frame_callback_t callback,
	void* user_state,
	QarCancelToken* token
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_begin_frame_async,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_BEGIN_FRAME_ASYNC,
		stream,
		callback,
		user_state,
		token
	);
#else
	return qar_impl_render_sender_begin_frame_async(
		stream, callback, user_state, token
	);
#endif
}

static inline QarResult
qar_render_sender_change_layout_async(
	QarRenderSender* stream,
	const QarVideoFrameLayout* layout,
	qar_render_sender_change_layout_callback_t callback,
	void* user_state,
	QarCancelToken* token
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_change_layout_async,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_CHANGE_LAYOUT_ASYNC,
		stream,
		layout,
		callback,
		user_state,
		token
	);
#else
	return qar_impl_render_sender_change_layout_async(
		stream, layout, callback, user_state, token
	);
#endif
}

static inline QarResult
qar_render_sender_create(
	QarSession* session,
	QarRenderSenderInit* init,
	QarCancelToken* cancel,
	QarRenderSender** out_stream
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_create,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_CREATE,
		session,
		init,
		cancel,
		out_stream
	);
#else
	return qar_impl_render_sender_create(session, init, cancel, out_stream);
#endif
}

static inline QarResult
qar_render_sender_frame_cpu(
	QarRenderSender* stream, QarVideoFrameCpu* out_frame
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_frame_cpu,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_FRAME_CPU,
		stream,
		out_frame
	);
#else
	return qar_impl_render_sender_frame_cpu(stream, out_frame);
#endif
}

static inline QarResult
qar_render_sender_begin_frame(
	QarRenderSender* stream,
	QarCancelToken* token,
	QarRenderFrameInfo** out_frame_info
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_sender_begin_frame,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_SENDER_BEGIN_FRAME,
		stream,
		token,
		out_frame_info
	);
#else
	return qar_impl_render_sender_begin_frame(stream, token, out_frame_info);
#endif
}

// Frame info dispatch wrappers
static inline bool
qar_render_frame_info_handle_is_valid(QarRenderFrameInfo* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	// No direct is_valid function; attempt a cheap call by querying view 0
	// Not ideal for dynamic, provide a local check via destroy no-op
	return handle != NULL;
#else
	return handle != NULL;
#endif
}

static inline void
qar_render_frame_info_handle_destroy(QarRenderFrameInfo* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		render_frame_info_handle_destroy,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_FRAME_INFO_HANDLE_DESTROY,
		handle
	);
#else
	qar_impl_render_frame_info_handle_destroy(handle);
#endif
}

static inline QarResult
qar_render_frame_info_get_view_pose(
	QarRenderFrameInfo* handle, size_t view_index, QarPose* out_pose
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_frame_info_get_view_pose,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_FRAME_INFO_GET_VIEW_POSE,
		handle,
		view_index,
		out_pose
	);
#else
	return qar_impl_render_frame_info_get_view_pose(
		handle, view_index, out_pose
	);
#endif
}

static inline QarResult
qar_render_frame_info_get_view_fov(
	QarRenderFrameInfo* handle, size_t view_index, QarFov* out_fov
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		render_frame_info_get_view_fov,
		render_stream_sender,
		QAR_IMPL_FUNC_RENDER_FRAME_INFO_GET_VIEW_FOV,
		handle,
		view_index,
		out_fov
	);
#else
	return qar_impl_render_frame_info_get_view_fov(handle, view_index, out_fov);
#endif
}

#endif // QAR_STREAMING_C_V0_DETAIL_RENDER_STREAM_H

#ifndef QAR_STREAMING_C_V0_DETAIL_RESULT_H
#define QAR_STREAMING_C_V0_DETAIL_RESULT_H

#ifdef QAR_ENABLE_DYNAMIC_LOADING
#endif

// Function registry enum for result functions
typedef enum QarResultImplFuncIndex
{
	QAR_IMPL_FUNC_RESULT_SUCCESS = 0,
	QAR_IMPL_FUNC_RESULT_ERROR,
	QAR_IMPL_FUNC_RESULT_IS_SUCCESS,
	QAR_IMPL_FUNC_RESULT_IS_ERROR,
	QAR_IMPL_FUNC_RESULT_HAS_CODE,
	QAR_IMPL_FUNC_RESULT_ERROR_WRAP_RESULT,
	QAR_IMPL_FUNC_RESULT_MESSAGE,
	QAR_IMPL_FUNC_RESULT_LOG_IF_ERROR,
	QAR_IMPL_FUNC_RESULT_COUNT
} QarResultImplFuncIndex;

// Function names macro for symbol loading (preserves modularity)
#define QAR_RESULT_IMPL_FUNCTION_NAMES                                         \
	"qar_impl_result_success", "qar_impl_result_error",                        \
		"qar_impl_result_is_success", "qar_impl_result_is_error",              \
		"qar_impl_result_has_code", "qar_impl_error_wrap_result",              \
		"qar_impl_result_message", "qar_impl_result_log_if_error"

#ifdef QAR_ENABLE_DYNAMIC_LOADING
// Function typedefs for error handling
typedef QarResult (*qar_result_success_func_t)(void);
typedef QarResult (*qar_result_error_func_t)(
	QarStatusCode code, const char* message
);
typedef bool (*qar_result_is_success_func_t)(QarResult result);
typedef bool (*qar_result_is_error_func_t)(QarResult result);
typedef bool (*qar_result_has_code_func_t)(
	QarResult result, QarStatusCode code
);
typedef QarResult (*qar_error_wrap_result_func_t)(
	QarResult inner_result, QarStatusCode new_code, const char* new_message
);
typedef void (*qar_result_message_func_t)(
	QarResult result, char* out_buffer, size_t buffer_size
);
typedef void (*qar_result_log_if_error_func_t)(QarResult result);
#else
// Static implementation function declarations
QAR_C_API QarResult qar_impl_result_success(void);
QAR_C_API QarResult
qar_impl_result_error(QarStatusCode code, const char* message);
QAR_C_API bool qar_impl_result_is_success(QarResult result);
QAR_C_API bool qar_impl_result_is_error(QarResult result);
QAR_C_API bool qar_impl_result_has_code(QarResult result, QarStatusCode code);
QAR_C_API QarResult qar_impl_error_wrap_result(
	QarResult inner_result, QarStatusCode new_code, const char* new_message
);
QAR_C_API void
qar_impl_result_message(QarResult result, char* out_buffer, size_t buffer_size);
QAR_C_API void qar_impl_result_log_if_error(QarResult result);
#endif
// Error handling dispatch functions
static inline QarResult
qar_result_success(void)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		result_success, result, QAR_IMPL_FUNC_RESULT_SUCCESS
	);
#else
	return qar_impl_result_success();
#endif
}

static inline QarResult
qar_result_error(QarStatusCode code, const char* message)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		result_error, result, QAR_IMPL_FUNC_RESULT_ERROR, code, message
	);
#else
	return qar_impl_result_error(code, message);
#endif
}

static inline bool
qar_result_is_success(QarResult result)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		result_is_success, result, QAR_IMPL_FUNC_RESULT_IS_SUCCESS, result
	);
#else
	return qar_impl_result_is_success(result);
#endif
}

static inline bool
qar_result_is_error(QarResult result)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		result_is_error, result, QAR_IMPL_FUNC_RESULT_IS_ERROR, result
	);
#else
	return qar_impl_result_is_error(result);
#endif
}

static inline bool
qar_result_has_code(QarResult result, QarStatusCode code)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		result_has_code, result, QAR_IMPL_FUNC_RESULT_HAS_CODE, result, code
	);
#else
	return qar_impl_result_has_code(result, code);
#endif
}

static inline QarResult
qar_error_wrap_result(
	QarResult inner_result, QarStatusCode new_code, const char* new_message
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		error_wrap_result,
		result,
		QAR_IMPL_FUNC_RESULT_ERROR_WRAP_RESULT,
		inner_result,
		new_code,
		new_message
	);
#else
	return qar_impl_error_wrap_result(inner_result, new_code, new_message);
#endif
}

static inline void
qar_result_message(QarResult result, char* out_buffer, size_t buffer_size)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		result_message,
		result,
		QAR_IMPL_FUNC_RESULT_MESSAGE,
		result,
		out_buffer,
		buffer_size
	);
#else
	return qar_impl_result_message(result, out_buffer, buffer_size);
#endif
}

static inline void
qar_result_log_if_error(QarResult result)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		result_log_if_error, result, QAR_IMPL_FUNC_RESULT_LOG_IF_ERROR, result
	);
#else
	qar_impl_result_log_if_error(result);
#endif
}

#endif // QAR_STREAMING_C_V0_DETAIL_RESULT_H

#ifndef QAR_STREAMING_C_V0_DETAIL_RUNTIME_H
#define QAR_STREAMING_C_V0_DETAIL_RUNTIME_H

#ifdef QAR_ENABLE_DYNAMIC_LOADING
#endif

// Function registry enum for runtime functions
typedef enum QarRuntimeImplFuncIndex
{
	QAR_IMPL_FUNC_RUNTIME_HANDLE_DESTROY = 0,
	QAR_IMPL_FUNC_RUNTIME_CREATE,
	QAR_IMPL_FUNC_RUNTIME_CREATE_SESSION,
	QAR_IMPL_FUNC_RUNTIME_DESTROY,
	QAR_IMPL_FUNC_LIBRARY_INIT,
	QAR_IMPL_FUNC_LIBRARY_DESTROY,
	QAR_IMPL_FUNC_RUNTIME_COUNT
} QarRuntimeImplFuncIndex;

// Function names macro for symbol loading (preserves modularity)
#define QAR_RUNTIME_IMPL_FUNCTION_NAMES                                        \
	"qar_impl_runtime_handle_destroy", "qar_impl_runtime_create",              \
		"qar_impl_runtime_create_session", "qar_impl_runtime_destroy",         \
		"qar_impl_library_init", "qar_impl_library_destroy"

#ifdef QAR_ENABLE_DYNAMIC_LOADING
// Function typedefs for runtime management
typedef void (*qar_runtime_handle_destroy_func_t)(QarRuntime* handle);
typedef QarResult (*qar_runtime_create_func_t)(
	const QarRuntimeInit* init, QarRuntime** runtime
);
typedef QarResult (*qar_runtime_create_session_func_t)(
	const QarRuntime* runtime,
	const QarSessionCreateInit* init,
	QarSessionInvite** session
);
typedef void (*qar_runtime_destroy_func_t)(QarRuntime* runtime);
typedef QarResult (*qar_library_init_func_t)(const QarLibraryInit* init);
typedef QarResult (*qar_library_destroy_func_t)(void);
#else
// Static implementation function declarations
QAR_C_API void qar_impl_runtime_handle_destroy(QarRuntime* handle);
QAR_C_API QarResult
qar_impl_runtime_create(const QarRuntimeInit* init, QarRuntime** runtime);
QAR_C_API QarResult qar_impl_runtime_create_session(
	const QarRuntime* runtime,
	const QarSessionCreateInit* init,
	QarSessionInvite** session
);
QAR_C_API void qar_impl_runtime_destroy(QarRuntime* runtime);
QAR_C_API QarResult qar_impl_library_init(const QarLibraryInit* init);
QAR_C_API QarResult qar_impl_library_destroy(void);
#endif

// ============================================================================

static inline void
qar_runtime_handle_destroy(QarRuntime* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		runtime_handle_destroy,
		runtime,
		QAR_IMPL_FUNC_RUNTIME_HANDLE_DESTROY,
		handle
	);
#else
	qar_impl_runtime_handle_destroy(handle);
#endif
}

static inline QarResult
qar_runtime_create(const QarRuntimeInit* init, QarRuntime** runtime)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		runtime_create, runtime, QAR_IMPL_FUNC_RUNTIME_CREATE, init, runtime
	);
#else
	return qar_impl_runtime_create(init, runtime);
#endif
}

static inline QarResult
qar_runtime_create_session(
	const QarRuntime* runtime,
	const QarSessionCreateInit* init,
	QarSessionInvite** session
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		runtime_create_session,
		runtime,
		QAR_IMPL_FUNC_RUNTIME_CREATE_SESSION,
		runtime,
		init,
		session
	);
#else
	return qar_impl_runtime_create_session(runtime, init, session);
#endif
}

static inline void
qar_runtime_destroy(QarRuntime* runtime)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		runtime_destroy, runtime, QAR_IMPL_FUNC_RUNTIME_DESTROY, runtime
	);
#else
	qar_impl_runtime_destroy(runtime);
#endif
}

static inline QarResult
qar_library_init(const QarLibraryInit* init)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		library_init, runtime, QAR_IMPL_FUNC_LIBRARY_INIT, init
	);
#else
	return qar_impl_library_init(init);
#endif
}

static inline QarResult
qar_library_destroy(void)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		library_destroy, runtime, QAR_IMPL_FUNC_LIBRARY_DESTROY
	);
#else
	return qar_impl_library_destroy();
#endif
}

#endif // QAR_STREAMING_C_V0_DETAIL_RUNTIME_H
#ifndef QAR_STREAMING_C_V0_DETAIL_SESSION_H
#define QAR_STREAMING_C_V0_DETAIL_SESSION_H

#ifdef QAR_ENABLE_DYNAMIC_LOADING
#endif

// Function registry enum for session functions
typedef enum QarSessionImplFuncIndex
{
	QAR_IMPL_FUNC_SESSION_HANDLE_DESTROY = 0,
	QAR_IMPL_FUNC_SESSION_JOIN,
	QAR_IMPL_FUNC_SESSION_GET_ID,
	QAR_IMPL_FUNC_SESSION_GET_INVITE_DATA_SIZE,
	QAR_IMPL_FUNC_SESSION_GET_INVITE_DATA,
	QAR_IMPL_FUNC_SESSION_DESTROY,
	QAR_IMPL_FUNC_SESSION_INVITE_PEER_ASYNC,
	QAR_IMPL_FUNC_SESSION_CONNECTION_STRING_HOLOLENS,
	QAR_IMPL_FUNC_SESSION_CONNECTION_STRING_QUEST,
	QAR_IMPL_FUNC_SESSION_CONNECTION_STRING_VISUALIZER,
	QAR_IMPL_FUNC_SESSION_CONNECTION_STRING_ZED,
	QAR_IMPL_FUNC_SESSION_COUNT
} QarSessionImplFuncIndex;

// Function names macro for symbol loading (preserves modularity)
#define QAR_SESSION_IMPL_FUNCTION_NAMES                                        \
	"qar_impl_session_handle_destroy", "qar_impl_session_join",                \
		"qar_impl_session_get_id", "qar_impl_session_get_invite_data_size",    \
		"qar_impl_session_get_invite_data", "qar_impl_session_destroy",        \
		"qar_impl_session_invite_peer_async",                                  \
		"qar_impl_session_invite_connection_string_hololens",                  \
		"qar_impl_session_invite_connection_string_quest",                     \
		"qar_impl_session_invite_connection_string_visualizer",                \
		"qar_impl_session_invite_connection_string_zed"

#ifdef QAR_ENABLE_DYNAMIC_LOADING
// Function typedefs for session management
typedef void (*qar_session_handle_destroy_func_t)(QarSession* handle);

typedef QarResult (*qar_session_join_func_t)(
	const QarSessionJoinInit* init, QarSession** session
);
typedef QarResult (*qar_session_get_id_func_t)(
	const QarSession* session, QarSessionId* session_id
);
typedef size_t (*qar_session_get_invite_data_size_func_t)(
	const QarSession* session
);
typedef QarResult (*qar_session_get_invite_data_func_t)(
	const QarSession* session, uint8_t* buffer, size_t buffer_size
);
typedef void (*qar_session_destroy_func_t)(QarSession* session);
typedef QarResult (*qar_session_invite_peer_async_func_t)(
	QarSession* session,
	const QarSessionInvitePeerInit* init,
	qar_session_invite_peer_result_callback_t result_callback,
	qar_session_invite_peer_update_callback_t update_callback,
	void* user_state
);
typedef QarResult (*qar_session_invite_connection_string_hololens_func_t)(
	const char* hostname, char* buffer, size_t buffer_size
);
typedef QarResult (*qar_session_invite_connection_string_quest_func_t)(
	char* buffer, size_t buffer_size
);
typedef QarResult (*qar_session_invite_connection_string_visualizer_func_t)(
	char* buffer, size_t buffer_size
);
typedef QarResult (*qar_session_invite_connection_string_zed_func_t)(
	char* buffer, size_t buffer_size
);

#else

// Static implementation function declarations
QAR_C_API void qar_impl_session_handle_destroy(QarSession* handle);
QAR_C_API QarResult
qar_impl_session_join(const QarSessionJoinInit* init, QarSession** session);
QAR_C_API QarResult
qar_impl_session_get_id(const QarSession* session, QarSessionId* session_id);
QAR_C_API size_t
qar_impl_session_get_invite_data_size(const QarSession* session);
QAR_C_API QarResult qar_impl_session_get_invite_data(
	const QarSession* session, uint8_t* buffer, size_t buffer_size
);
QAR_C_API void qar_impl_session_destroy(QarSession* session);
QAR_C_API QarResult qar_impl_session_invite_peer_async(
	QarSession* session,
	const QarSessionInvitePeerInit* init,
	qar_session_invite_peer_result_callback_t result_callback,
	qar_session_invite_peer_update_callback_t update_callback,
	void* user_state
);
QAR_C_API QarResult qar_impl_session_invite_connection_string_hololens(
	const char* hostname, char* buffer, size_t buffer_size
);
QAR_C_API QarResult qar_impl_session_invite_connection_string_quest(
	char* buffer, size_t buffer_size
);
QAR_C_API QarResult qar_impl_session_invite_connection_string_visualizer(
	char* buffer, size_t buffer_size
);
QAR_C_API QarResult
qar_impl_session_invite_connection_string_zed(char* buffer, size_t buffer_size);

#endif
// ============================================================================
// SESSION MANAGEMENT DISPATCH FUNCTIONS
// ============================================================================

static inline void
qar_session_handle_destroy(QarSession* handle)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		session_handle_destroy,
		session,
		QAR_IMPL_FUNC_SESSION_HANDLE_DESTROY,
		handle
	);
#else
	qar_impl_session_handle_destroy(handle);
#endif
}

static inline QarResult
qar_session_join(const QarSessionJoinInit* init, QarSession** session)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_join, session, QAR_IMPL_FUNC_SESSION_JOIN, init, session
	);
#else
	return qar_impl_session_join(init, session);
#endif
}

static inline QarResult
qar_session_get_id(const QarSession* session, QarSessionId* session_id)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_get_id,
		session,
		QAR_IMPL_FUNC_SESSION_GET_ID,
		session,
		session_id
	);
#else
	return qar_impl_session_get_id(session, session_id);
#endif
}

static inline size_t
qar_session_get_invite_data_size(const QarSession* session)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_get_invite_data_size,
		session,
		QAR_IMPL_FUNC_SESSION_GET_INVITE_DATA_SIZE,
		session
	);
#else
	return qar_impl_session_get_invite_data_size(session);
#endif
}

static inline QarResult
qar_session_get_invite_data(
	const QarSession* session, uint8_t* buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_get_invite_data,
		session,
		QAR_IMPL_FUNC_SESSION_GET_INVITE_DATA,
		session,
		buffer,
		buffer_size
	);
#else
	return qar_impl_session_get_invite_data(session, buffer, buffer_size);
#endif
}

static inline void
qar_session_destroy(QarSession* session)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_VOID_FROM_MODULE(
		session_destroy, session, QAR_IMPL_FUNC_SESSION_DESTROY, session
	);
#else
	qar_impl_session_destroy(session);
#endif
}

static inline QarResult
qar_session_invite_peer_async(
	QarSession* session,
	const QarSessionInvitePeerInit* init,
	qar_session_invite_peer_result_callback_t result_callback,
	qar_session_invite_peer_update_callback_t update_callback,
	void* user_state
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_invite_peer_async,
		session,
		QAR_IMPL_FUNC_SESSION_INVITE_PEER_ASYNC,
		session,
		init,
		result_callback,
		update_callback,
		user_state
	);
#else
	return qar_impl_session_invite_peer_async(
		session, init, result_callback, update_callback, user_state
	);
#endif
}

static inline QarResult
qar_session_invite_connection_string_hololens(
	const char* hostname, char* buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_invite_connection_string_hololens,
		session,
		QAR_IMPL_FUNC_SESSION_CONNECTION_STRING_HOLOLENS,
		hostname,
		buffer,
		buffer_size
	);
#else
	return qar_impl_session_invite_connection_string_hololens(
		hostname, buffer, buffer_size
	);
#endif
}

static inline QarResult
qar_session_invite_connection_string_quest(char* buffer, size_t buffer_size)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_invite_connection_string_quest,
		session,
		QAR_IMPL_FUNC_SESSION_CONNECTION_STRING_QUEST,
		buffer,
		buffer_size
	);
#else
	return qar_impl_session_invite_connection_string_quest(buffer, buffer_size);
#endif
}

static inline QarResult
qar_session_invite_connection_string_visualizer(
	char* buffer, size_t buffer_size
)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_invite_connection_string_visualizer,
		session,
		QAR_IMPL_FUNC_SESSION_CONNECTION_STRING_VISUALIZER,
		buffer,
		buffer_size
	);
#else
	return qar_impl_session_invite_connection_string_visualizer(
		buffer, buffer_size
	);
#endif
}

static inline QarResult
qar_session_invite_connection_string_zed(char* buffer, size_t buffer_size)
{
#ifdef QAR_ENABLE_DYNAMIC_LOADING
	QAR_CALL_DYNAMIC_FUNCTION_FROM_MODULE(
		session_invite_connection_string_zed,
		session,
		QAR_IMPL_FUNC_SESSION_CONNECTION_STRING_ZED,
		buffer,
		buffer_size
	);
#else
	return qar_impl_session_invite_connection_string_zed(buffer, buffer_size);
#endif
}

#endif // QAR_STREAMING_C_V0_DETAIL_SESSION_H

#endif // QAR_FUNCTIONS_H
